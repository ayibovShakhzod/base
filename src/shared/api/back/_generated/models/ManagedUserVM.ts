/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ManagedUserVM
 */
export interface ManagedUserVM {
    /**
     * 
     * @type {number}
     * @memberof ManagedUserVM
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ManagedUserVM
     */
    login: string;
    /**
     * 
     * @type {string}
     * @memberof ManagedUserVM
     */
    fullName?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagedUserVM
     */
    email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ManagedUserVM
     */
    activated?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ManagedUserVM
     */
    imageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagedUserVM
     */
    organization?: string;
    /**
     * 
     * @type {Date}
     * @memberof ManagedUserVM
     */
    expirationDate?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof ManagedUserVM
     */
    expired?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ManagedUserVM
     */
    passport?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagedUserVM
     */
    createdBy?: string;
    /**
     * 
     * @type {Date}
     * @memberof ManagedUserVM
     */
    createdDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof ManagedUserVM
     */
    lastModifiedBy?: string;
    /**
     * 
     * @type {Date}
     * @memberof ManagedUserVM
     */
    lastModifiedDate?: Date;
    /**
     * 
     * @type {Set<string>}
     * @memberof ManagedUserVM
     */
    authorities?: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof ManagedUserVM
     */
    password?: string;
}


export function ManagedUserVMFromJSON(json: any): ManagedUserVM {
    return ManagedUserVMFromJSONTyped(json, false);
}

export function ManagedUserVMFromJSONTyped(json: any, ignoreDiscriminator: boolean): ManagedUserVM {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'login': json['login'],
        'fullName': !exists(json, 'fullName') ? undefined : json['fullName'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'activated': !exists(json, 'activated') ? undefined : json['activated'],
        'imageUrl': !exists(json, 'imageUrl') ? undefined : json['imageUrl'],
        'organization': !exists(json, 'organization') ? undefined : json['organization'],
        'expirationDate': !exists(json, 'expirationDate') ? undefined : (new Date(json['expirationDate'])),
        'expired': !exists(json, 'expired') ? undefined : json['expired'],
        'passport': !exists(json, 'passport') ? undefined : json['passport'],
        'createdBy': !exists(json, 'createdBy') ? undefined : json['createdBy'],
        'createdDate': !exists(json, 'createdDate') ? undefined : (new Date(json['createdDate'])),
        'lastModifiedBy': !exists(json, 'lastModifiedBy') ? undefined : json['lastModifiedBy'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : (new Date(json['lastModifiedDate'])),
        'authorities': !exists(json, 'authorities') ? undefined : json['authorities'],
        'password': !exists(json, 'password') ? undefined : json['password'],
    };
}

export function ManagedUserVMToJSON(value?: ManagedUserVM | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'login': value.login,
        'fullName': value.fullName,
        'email': value.email,
        'activated': value.activated,
        'imageUrl': value.imageUrl,
        'organization': value.organization,
        'expirationDate': value.expirationDate === undefined ? undefined : (value.expirationDate.toISOString()),
        'expired': value.expired,
        'passport': value.passport,
        'createdBy': value.createdBy,
        'createdDate': value.createdDate === undefined ? undefined : (value.createdDate.toISOString()),
        'lastModifiedBy': value.lastModifiedBy,
        'lastModifiedDate': value.lastModifiedDate === undefined ? undefined : (value.lastModifiedDate.toISOString()),
        'authorities': value.authorities,
        'password': value.password,
    };
}

