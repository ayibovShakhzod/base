/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    AvtomatDTO,
    AvtomatDTOFromJSON,
    AvtomatDTOToJSON,
} from '../models';

export interface CreateAvtomatRequest {
    avtomatDTO: AvtomatDTO;
}

export interface DeleteAvtomatRequest {
    id: number;
}

export interface GetAllAvtomatsRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetAllByObyekt10Request {
    obyektId: number;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetAvtomatRequest {
    id: number;
}

export interface PartialUpdateAvtomatRequest {
    id: number;
    avtomatDTO: AvtomatDTO;
}

export interface UpdateAvtomatRequest {
    id: number;
    avtomatDTO: AvtomatDTO;
}

/**
 * 
 */
export class AvtomatResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createAvtomatRequestOpts = (requestParameters: CreateAvtomatRequest): runtime.RequestOpts => {
        if (requestParameters.avtomatDTO === null || requestParameters.avtomatDTO === undefined) {
            throw new runtime.RequiredError('avtomatDTO','Required parameter requestParameters.avtomatDTO was null or undefined when calling createAvtomat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/avtomats`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AvtomatDTOToJSON(requestParameters.avtomatDTO),
        };
    }

    /**
     */
    protected createAvtomatFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AvtomatDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvtomatDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createAvtomatRaw = async (requestParameters: CreateAvtomatRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AvtomatDTO>> => {
        const context = this.createAvtomatRequestOpts(requestParameters);
        return this.createAvtomatFetch(context, initOverrides);
    }

    /**
     */
    createAvtomat = async (avtomatDTO: AvtomatDTO, initOverrides?: RequestInit): Promise<AvtomatDTO> => {
        const response = await this.createAvtomatRaw({ avtomatDTO: avtomatDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteAvtomatRequestOpts = (requestParameters: DeleteAvtomatRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAvtomat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/avtomats/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteAvtomatFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteAvtomatRaw = async (requestParameters: DeleteAvtomatRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteAvtomatRequestOpts(requestParameters);
        return this.deleteAvtomatFetch(context, initOverrides);
    }

    /**
     */
    deleteAvtomat = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteAvtomatRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAllAvtomatsRequestOpts = (requestParameters: GetAllAvtomatsRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/avtomats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllAvtomatsFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AvtomatDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AvtomatDTOFromJSON));
    }

    /**
     */
    protected getAllAvtomatsRaw = async (requestParameters: GetAllAvtomatsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AvtomatDTO>>> => {
        const context = this.getAllAvtomatsRequestOpts(requestParameters);
        return this.getAllAvtomatsFetch(context, initOverrides);
    }

    /**
     */
    getAllAvtomats = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<AvtomatDTO>> => {
        const response = await this.getAllAvtomatsRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllAvtomats = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllAvtomatsRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllAvtomatsFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<AvtomatDTO>>): SWRResponse<Array<AvtomatDTO>> => {
            return useSWR<Array<AvtomatDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getAllByObyekt10RequestOpts = (requestParameters: GetAllByObyekt10Request): runtime.RequestOpts => {
        if (requestParameters.obyektId === null || requestParameters.obyektId === undefined) {
            throw new runtime.RequiredError('obyektId','Required parameter requestParameters.obyektId was null or undefined when calling getAllByObyekt10.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/avtomats/obyekt/{obyektId}`.replace(`{${"obyektId"}}`, encodeURIComponent(String(requestParameters.obyektId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllByObyekt10Fetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AvtomatDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AvtomatDTOFromJSON));
    }

    /**
     */
    protected getAllByObyekt10Raw = async (requestParameters: GetAllByObyekt10Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AvtomatDTO>>> => {
        const context = this.getAllByObyekt10RequestOpts(requestParameters);
        return this.getAllByObyekt10Fetch(context, initOverrides);
    }

    /**
     */
    getAllByObyekt10 = async (obyektId: number, page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<AvtomatDTO>> => {
        const response = await this.getAllByObyekt10Raw({ obyektId: obyektId, page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllByObyekt10 = (() => {
        const key = (requestParameters: GetAllByObyekt10Request, config?: SWRConfiguration<Array<AvtomatDTO>>) => this.getAllByObyekt10RequestOpts(requestParameters);
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllByObyekt10Fetch(context));
        const fn = (requestParameters: GetAllByObyekt10Request, config?: SWRConfiguration<Array<AvtomatDTO>>): SWRResponse<Array<AvtomatDTO>> => {
            return useSWR<Array<AvtomatDTO>>(() => key(requestParameters), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getAvtomatRequestOpts = (requestParameters: GetAvtomatRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAvtomat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/avtomats/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAvtomatFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AvtomatDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvtomatDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getAvtomatRaw = async (requestParameters: GetAvtomatRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AvtomatDTO>> => {
        const context = this.getAvtomatRequestOpts(requestParameters);
        return this.getAvtomatFetch(context, initOverrides);
    }

    /**
     */
    getAvtomat = async (id: number, initOverrides?: RequestInit): Promise<AvtomatDTO> => {
        const response = await this.getAvtomatRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAvtomat = (() => {
        const key = (id: number) => this.getAvtomatRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAvtomatFetch(context));
        const fn = (id: number, config?: SWRConfiguration<AvtomatDTO>): SWRResponse<AvtomatDTO> => {
            return useSWR<AvtomatDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateAvtomatRequestOpts = (requestParameters: PartialUpdateAvtomatRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateAvtomat.');
        }

        if (requestParameters.avtomatDTO === null || requestParameters.avtomatDTO === undefined) {
            throw new runtime.RequiredError('avtomatDTO','Required parameter requestParameters.avtomatDTO was null or undefined when calling partialUpdateAvtomat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/avtomats/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AvtomatDTOToJSON(requestParameters.avtomatDTO),
        };
    }

    /**
     */
    protected partialUpdateAvtomatFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AvtomatDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvtomatDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateAvtomatRaw = async (requestParameters: PartialUpdateAvtomatRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AvtomatDTO>> => {
        const context = this.partialUpdateAvtomatRequestOpts(requestParameters);
        return this.partialUpdateAvtomatFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateAvtomat = async (id: number, avtomatDTO: AvtomatDTO, initOverrides?: RequestInit): Promise<AvtomatDTO> => {
        const response = await this.partialUpdateAvtomatRaw({ id: id, avtomatDTO: avtomatDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateAvtomatRequestOpts = (requestParameters: UpdateAvtomatRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAvtomat.');
        }

        if (requestParameters.avtomatDTO === null || requestParameters.avtomatDTO === undefined) {
            throw new runtime.RequiredError('avtomatDTO','Required parameter requestParameters.avtomatDTO was null or undefined when calling updateAvtomat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/avtomats/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AvtomatDTOToJSON(requestParameters.avtomatDTO),
        };
    }

    /**
     */
    protected updateAvtomatFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AvtomatDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvtomatDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateAvtomatRaw = async (requestParameters: UpdateAvtomatRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AvtomatDTO>> => {
        const context = this.updateAvtomatRequestOpts(requestParameters);
        return this.updateAvtomatFetch(context, initOverrides);
    }

    /**
     */
    updateAvtomat = async (id: number, avtomatDTO: AvtomatDTO, initOverrides?: RequestInit): Promise<AvtomatDTO> => {
        const response = await this.updateAvtomatRaw({ id: id, avtomatDTO: avtomatDTO }, initOverrides);
        return await response.value();
    }



}
