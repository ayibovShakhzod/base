/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    ObjectTasnifiTuriDTO,
    ObjectTasnifiTuriDTOFromJSON,
    ObjectTasnifiTuriDTOToJSON,
} from '../models';

export interface CreateObjectTasnifiTuriRequest {
    objectTasnifiTuriDTO: ObjectTasnifiTuriDTO;
}

export interface DeleteObjectTasnifiTuriRequest {
    id: number;
}

export interface GetAllObjectTasnifiTurisRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetObjectTasnifiTuriRequest {
    id: number;
}

export interface PartialUpdateObjectTasnifiTuriRequest {
    id: number;
    objectTasnifiTuriDTO: ObjectTasnifiTuriDTO;
}

export interface UpdateObjectTasnifiTuriRequest {
    id: number;
    objectTasnifiTuriDTO: ObjectTasnifiTuriDTO;
}

/**
 * 
 */
export class ObjectTasnifiTuriResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createObjectTasnifiTuriRequestOpts = (requestParameters: CreateObjectTasnifiTuriRequest): runtime.RequestOpts => {
        if (requestParameters.objectTasnifiTuriDTO === null || requestParameters.objectTasnifiTuriDTO === undefined) {
            throw new runtime.RequiredError('objectTasnifiTuriDTO','Required parameter requestParameters.objectTasnifiTuriDTO was null or undefined when calling createObjectTasnifiTuri.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/object-tasnifi-turis`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ObjectTasnifiTuriDTOToJSON(requestParameters.objectTasnifiTuriDTO),
        };
    }

    /**
     */
    protected createObjectTasnifiTuriFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObjectTasnifiTuriDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectTasnifiTuriDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createObjectTasnifiTuriRaw = async (requestParameters: CreateObjectTasnifiTuriRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObjectTasnifiTuriDTO>> => {
        const context = this.createObjectTasnifiTuriRequestOpts(requestParameters);
        return this.createObjectTasnifiTuriFetch(context, initOverrides);
    }

    /**
     */
    createObjectTasnifiTuri = async (objectTasnifiTuriDTO: ObjectTasnifiTuriDTO, initOverrides?: RequestInit): Promise<ObjectTasnifiTuriDTO> => {
        const response = await this.createObjectTasnifiTuriRaw({ objectTasnifiTuriDTO: objectTasnifiTuriDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteObjectTasnifiTuriRequestOpts = (requestParameters: DeleteObjectTasnifiTuriRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteObjectTasnifiTuri.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/object-tasnifi-turis/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteObjectTasnifiTuriFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteObjectTasnifiTuriRaw = async (requestParameters: DeleteObjectTasnifiTuriRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteObjectTasnifiTuriRequestOpts(requestParameters);
        return this.deleteObjectTasnifiTuriFetch(context, initOverrides);
    }

    /**
     */
    deleteObjectTasnifiTuri = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteObjectTasnifiTuriRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAllObjectTasnifiTurisRequestOpts = (requestParameters: GetAllObjectTasnifiTurisRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/object-tasnifi-turis`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllObjectTasnifiTurisFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ObjectTasnifiTuriDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ObjectTasnifiTuriDTOFromJSON));
    }

    /**
     */
    protected getAllObjectTasnifiTurisRaw = async (requestParameters: GetAllObjectTasnifiTurisRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ObjectTasnifiTuriDTO>>> => {
        const context = this.getAllObjectTasnifiTurisRequestOpts(requestParameters);
        return this.getAllObjectTasnifiTurisFetch(context, initOverrides);
    }

    /**
     */
    getAllObjectTasnifiTuris = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<ObjectTasnifiTuriDTO>> => {
        const response = await this.getAllObjectTasnifiTurisRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllObjectTasnifiTuris = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllObjectTasnifiTurisRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllObjectTasnifiTurisFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<ObjectTasnifiTuriDTO>>): SWRResponse<Array<ObjectTasnifiTuriDTO>> => {
            return useSWR<Array<ObjectTasnifiTuriDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getObjectTasnifiTuriRequestOpts = (requestParameters: GetObjectTasnifiTuriRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getObjectTasnifiTuri.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/object-tasnifi-turis/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getObjectTasnifiTuriFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObjectTasnifiTuriDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectTasnifiTuriDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getObjectTasnifiTuriRaw = async (requestParameters: GetObjectTasnifiTuriRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObjectTasnifiTuriDTO>> => {
        const context = this.getObjectTasnifiTuriRequestOpts(requestParameters);
        return this.getObjectTasnifiTuriFetch(context, initOverrides);
    }

    /**
     */
    getObjectTasnifiTuri = async (id: number, initOverrides?: RequestInit): Promise<ObjectTasnifiTuriDTO> => {
        const response = await this.getObjectTasnifiTuriRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetObjectTasnifiTuri = (() => {
        const key = (id: number) => this.getObjectTasnifiTuriRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getObjectTasnifiTuriFetch(context));
        const fn = (id: number, config?: SWRConfiguration<ObjectTasnifiTuriDTO>): SWRResponse<ObjectTasnifiTuriDTO> => {
            return useSWR<ObjectTasnifiTuriDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateObjectTasnifiTuriRequestOpts = (requestParameters: PartialUpdateObjectTasnifiTuriRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateObjectTasnifiTuri.');
        }

        if (requestParameters.objectTasnifiTuriDTO === null || requestParameters.objectTasnifiTuriDTO === undefined) {
            throw new runtime.RequiredError('objectTasnifiTuriDTO','Required parameter requestParameters.objectTasnifiTuriDTO was null or undefined when calling partialUpdateObjectTasnifiTuri.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/object-tasnifi-turis/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ObjectTasnifiTuriDTOToJSON(requestParameters.objectTasnifiTuriDTO),
        };
    }

    /**
     */
    protected partialUpdateObjectTasnifiTuriFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObjectTasnifiTuriDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectTasnifiTuriDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateObjectTasnifiTuriRaw = async (requestParameters: PartialUpdateObjectTasnifiTuriRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObjectTasnifiTuriDTO>> => {
        const context = this.partialUpdateObjectTasnifiTuriRequestOpts(requestParameters);
        return this.partialUpdateObjectTasnifiTuriFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateObjectTasnifiTuri = async (id: number, objectTasnifiTuriDTO: ObjectTasnifiTuriDTO, initOverrides?: RequestInit): Promise<ObjectTasnifiTuriDTO> => {
        const response = await this.partialUpdateObjectTasnifiTuriRaw({ id: id, objectTasnifiTuriDTO: objectTasnifiTuriDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateObjectTasnifiTuriRequestOpts = (requestParameters: UpdateObjectTasnifiTuriRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateObjectTasnifiTuri.');
        }

        if (requestParameters.objectTasnifiTuriDTO === null || requestParameters.objectTasnifiTuriDTO === undefined) {
            throw new runtime.RequiredError('objectTasnifiTuriDTO','Required parameter requestParameters.objectTasnifiTuriDTO was null or undefined when calling updateObjectTasnifiTuri.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/object-tasnifi-turis/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ObjectTasnifiTuriDTOToJSON(requestParameters.objectTasnifiTuriDTO),
        };
    }

    /**
     */
    protected updateObjectTasnifiTuriFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObjectTasnifiTuriDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectTasnifiTuriDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateObjectTasnifiTuriRaw = async (requestParameters: UpdateObjectTasnifiTuriRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObjectTasnifiTuriDTO>> => {
        const context = this.updateObjectTasnifiTuriRequestOpts(requestParameters);
        return this.updateObjectTasnifiTuriFetch(context, initOverrides);
    }

    /**
     */
    updateObjectTasnifiTuri = async (id: number, objectTasnifiTuriDTO: ObjectTasnifiTuriDTO, initOverrides?: RequestInit): Promise<ObjectTasnifiTuriDTO> => {
        const response = await this.updateObjectTasnifiTuriRaw({ id: id, objectTasnifiTuriDTO: objectTasnifiTuriDTO }, initOverrides);
        return await response.value();
    }



}
