/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    StoykaDTO,
    StoykaDTOFromJSON,
    StoykaDTOToJSON,
} from '../models';

export interface CreateStoykaRequest {
    stoykaDTO: StoykaDTO;
}

export interface DeleteStoykaRequest {
    id: number;
}

export interface GetAllStoykasRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetStoykaRequest {
    id: number;
}

export interface PartialUpdateStoykaRequest {
    id: number;
    stoykaDTO: StoykaDTO;
}

export interface UpdateStoykaRequest {
    id: number;
    stoykaDTO: StoykaDTO;
}

/**
 * 
 */
export class StoykaResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createStoykaRequestOpts = (requestParameters: CreateStoykaRequest): runtime.RequestOpts => {
        if (requestParameters.stoykaDTO === null || requestParameters.stoykaDTO === undefined) {
            throw new runtime.RequiredError('stoykaDTO','Required parameter requestParameters.stoykaDTO was null or undefined when calling createStoyka.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/api/stoykas`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoykaDTOToJSON(requestParameters.stoykaDTO),
        };
    }

    /**
     */
    protected createStoykaFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StoykaDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoykaDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createStoykaRaw = async (requestParameters: CreateStoykaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StoykaDTO>> => {
        const context = this.createStoykaRequestOpts(requestParameters);
        return this.createStoykaFetch(context, initOverrides);
    }

    /**
     */
    createStoyka = async (stoykaDTO: StoykaDTO, initOverrides?: RequestInit): Promise<StoykaDTO> => {
        const response = await this.createStoykaRaw({ stoykaDTO: stoykaDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteStoykaRequestOpts = (requestParameters: DeleteStoykaRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStoyka.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/api/stoykas/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteStoykaFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteStoykaRaw = async (requestParameters: DeleteStoykaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteStoykaRequestOpts(requestParameters);
        return this.deleteStoykaFetch(context, initOverrides);
    }

    /**
     */
    deleteStoyka = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteStoykaRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAllStoykasRequestOpts = (requestParameters: GetAllStoykasRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/api/stoykas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllStoykasFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StoykaDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StoykaDTOFromJSON));
    }

    /**
     */
    protected getAllStoykasRaw = async (requestParameters: GetAllStoykasRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StoykaDTO>>> => {
        const context = this.getAllStoykasRequestOpts(requestParameters);
        return this.getAllStoykasFetch(context, initOverrides);
    }

    /**
     */
    getAllStoykas = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<StoykaDTO>> => {
        const response = await this.getAllStoykasRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllStoykas = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllStoykasRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllStoykasFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<StoykaDTO>>): SWRResponse<Array<StoykaDTO>> => {
            return useSWR<Array<StoykaDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getStoykaRequestOpts = (requestParameters: GetStoykaRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStoyka.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/api/stoykas/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getStoykaFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StoykaDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoykaDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getStoykaRaw = async (requestParameters: GetStoykaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StoykaDTO>> => {
        const context = this.getStoykaRequestOpts(requestParameters);
        return this.getStoykaFetch(context, initOverrides);
    }

    /**
     */
    getStoyka = async (id: number, initOverrides?: RequestInit): Promise<StoykaDTO> => {
        const response = await this.getStoykaRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetStoyka = (() => {
        const key = (id: number) => this.getStoykaRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getStoykaFetch(context));
        const fn = (id: number, config?: SWRConfiguration<StoykaDTO>): SWRResponse<StoykaDTO> => {
            return useSWR<StoykaDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateStoykaRequestOpts = (requestParameters: PartialUpdateStoykaRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateStoyka.');
        }

        if (requestParameters.stoykaDTO === null || requestParameters.stoykaDTO === undefined) {
            throw new runtime.RequiredError('stoykaDTO','Required parameter requestParameters.stoykaDTO was null or undefined when calling partialUpdateStoyka.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/api/stoykas/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: StoykaDTOToJSON(requestParameters.stoykaDTO),
        };
    }

    /**
     */
    protected partialUpdateStoykaFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StoykaDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoykaDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateStoykaRaw = async (requestParameters: PartialUpdateStoykaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StoykaDTO>> => {
        const context = this.partialUpdateStoykaRequestOpts(requestParameters);
        return this.partialUpdateStoykaFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateStoyka = async (id: number, stoykaDTO: StoykaDTO, initOverrides?: RequestInit): Promise<StoykaDTO> => {
        const response = await this.partialUpdateStoykaRaw({ id: id, stoykaDTO: stoykaDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateStoykaRequestOpts = (requestParameters: UpdateStoykaRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateStoyka.');
        }

        if (requestParameters.stoykaDTO === null || requestParameters.stoykaDTO === undefined) {
            throw new runtime.RequiredError('stoykaDTO','Required parameter requestParameters.stoykaDTO was null or undefined when calling updateStoyka.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/api/stoykas/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StoykaDTOToJSON(requestParameters.stoykaDTO),
        };
    }

    /**
     */
    protected updateStoykaFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StoykaDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoykaDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateStoykaRaw = async (requestParameters: UpdateStoykaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StoykaDTO>> => {
        const context = this.updateStoykaRequestOpts(requestParameters);
        return this.updateStoykaFetch(context, initOverrides);
    }

    /**
     */
    updateStoyka = async (id: number, stoykaDTO: StoykaDTO, initOverrides?: RequestInit): Promise<StoykaDTO> => {
        const response = await this.updateStoykaRaw({ id: id, stoykaDTO: stoykaDTO }, initOverrides);
        return await response.value();
    }



}
