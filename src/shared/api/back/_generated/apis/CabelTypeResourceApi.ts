/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    CabelTypeDTO,
    CabelTypeDTOFromJSON,
    CabelTypeDTOToJSON,
} from '../models';

export interface CreateCabelTypeRequest {
    cabelTypeDTO: CabelTypeDTO;
}

export interface DeleteCabelTypeRequest {
    id: number;
}

export interface GetAllByObyekt9Request {
    obyektId: number;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetAllCabelTypesRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetCabelTypeRequest {
    id: number;
}

export interface PartialUpdateCabelTypeRequest {
    id: number;
    cabelTypeDTO: CabelTypeDTO;
}

export interface UpdateCabelTypeRequest {
    id: number;
    cabelTypeDTO: CabelTypeDTO;
}

/**
 * 
 */
export class CabelTypeResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createCabelTypeRequestOpts = (requestParameters: CreateCabelTypeRequest): runtime.RequestOpts => {
        if (requestParameters.cabelTypeDTO === null || requestParameters.cabelTypeDTO === undefined) {
            throw new runtime.RequiredError('cabelTypeDTO','Required parameter requestParameters.cabelTypeDTO was null or undefined when calling createCabelType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cabel-types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CabelTypeDTOToJSON(requestParameters.cabelTypeDTO),
        };
    }

    /**
     */
    protected createCabelTypeFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CabelTypeDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CabelTypeDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createCabelTypeRaw = async (requestParameters: CreateCabelTypeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CabelTypeDTO>> => {
        const context = this.createCabelTypeRequestOpts(requestParameters);
        return this.createCabelTypeFetch(context, initOverrides);
    }

    /**
     */
    createCabelType = async (cabelTypeDTO: CabelTypeDTO, initOverrides?: RequestInit): Promise<CabelTypeDTO> => {
        const response = await this.createCabelTypeRaw({ cabelTypeDTO: cabelTypeDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteCabelTypeRequestOpts = (requestParameters: DeleteCabelTypeRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCabelType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cabel-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteCabelTypeFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteCabelTypeRaw = async (requestParameters: DeleteCabelTypeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteCabelTypeRequestOpts(requestParameters);
        return this.deleteCabelTypeFetch(context, initOverrides);
    }

    /**
     */
    deleteCabelType = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteCabelTypeRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAllByObyekt9RequestOpts = (requestParameters: GetAllByObyekt9Request): runtime.RequestOpts => {
        if (requestParameters.obyektId === null || requestParameters.obyektId === undefined) {
            throw new runtime.RequiredError('obyektId','Required parameter requestParameters.obyektId was null or undefined when calling getAllByObyekt9.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cabel-types/obyekt/{obyektId}`.replace(`{${"obyektId"}}`, encodeURIComponent(String(requestParameters.obyektId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllByObyekt9Fetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CabelTypeDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CabelTypeDTOFromJSON));
    }

    /**
     */
    protected getAllByObyekt9Raw = async (requestParameters: GetAllByObyekt9Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CabelTypeDTO>>> => {
        const context = this.getAllByObyekt9RequestOpts(requestParameters);
        return this.getAllByObyekt9Fetch(context, initOverrides);
    }

    /**
     */
    getAllByObyekt9 = async (obyektId: number, page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<CabelTypeDTO>> => {
        const response = await this.getAllByObyekt9Raw({ obyektId: obyektId, page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllByObyekt9 = (() => {
        const key = (requestParameters: GetAllByObyekt9Request, config?: SWRConfiguration<Array<CabelTypeDTO>>) => this.getAllByObyekt9RequestOpts(requestParameters);
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllByObyekt9Fetch(context));
        const fn = (requestParameters: GetAllByObyekt9Request, config?: SWRConfiguration<Array<CabelTypeDTO>>): SWRResponse<Array<CabelTypeDTO>> => {
            return useSWR<Array<CabelTypeDTO>>(() => key(requestParameters), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getAllCabelTypesRequestOpts = (requestParameters: GetAllCabelTypesRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cabel-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllCabelTypesFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CabelTypeDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CabelTypeDTOFromJSON));
    }

    /**
     */
    protected getAllCabelTypesRaw = async (requestParameters: GetAllCabelTypesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CabelTypeDTO>>> => {
        const context = this.getAllCabelTypesRequestOpts(requestParameters);
        return this.getAllCabelTypesFetch(context, initOverrides);
    }

    /**
     */
    getAllCabelTypes = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<CabelTypeDTO>> => {
        const response = await this.getAllCabelTypesRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllCabelTypes = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllCabelTypesRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllCabelTypesFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<CabelTypeDTO>>): SWRResponse<Array<CabelTypeDTO>> => {
            return useSWR<Array<CabelTypeDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getCabelTypeRequestOpts = (requestParameters: GetCabelTypeRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCabelType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cabel-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getCabelTypeFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CabelTypeDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CabelTypeDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getCabelTypeRaw = async (requestParameters: GetCabelTypeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CabelTypeDTO>> => {
        const context = this.getCabelTypeRequestOpts(requestParameters);
        return this.getCabelTypeFetch(context, initOverrides);
    }

    /**
     */
    getCabelType = async (id: number, initOverrides?: RequestInit): Promise<CabelTypeDTO> => {
        const response = await this.getCabelTypeRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetCabelType = (() => {
        const key = (id: number) => this.getCabelTypeRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getCabelTypeFetch(context));
        const fn = (id: number, config?: SWRConfiguration<CabelTypeDTO>): SWRResponse<CabelTypeDTO> => {
            return useSWR<CabelTypeDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateCabelTypeRequestOpts = (requestParameters: PartialUpdateCabelTypeRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateCabelType.');
        }

        if (requestParameters.cabelTypeDTO === null || requestParameters.cabelTypeDTO === undefined) {
            throw new runtime.RequiredError('cabelTypeDTO','Required parameter requestParameters.cabelTypeDTO was null or undefined when calling partialUpdateCabelType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cabel-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CabelTypeDTOToJSON(requestParameters.cabelTypeDTO),
        };
    }

    /**
     */
    protected partialUpdateCabelTypeFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CabelTypeDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CabelTypeDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateCabelTypeRaw = async (requestParameters: PartialUpdateCabelTypeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CabelTypeDTO>> => {
        const context = this.partialUpdateCabelTypeRequestOpts(requestParameters);
        return this.partialUpdateCabelTypeFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateCabelType = async (id: number, cabelTypeDTO: CabelTypeDTO, initOverrides?: RequestInit): Promise<CabelTypeDTO> => {
        const response = await this.partialUpdateCabelTypeRaw({ id: id, cabelTypeDTO: cabelTypeDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateCabelTypeRequestOpts = (requestParameters: UpdateCabelTypeRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCabelType.');
        }

        if (requestParameters.cabelTypeDTO === null || requestParameters.cabelTypeDTO === undefined) {
            throw new runtime.RequiredError('cabelTypeDTO','Required parameter requestParameters.cabelTypeDTO was null or undefined when calling updateCabelType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cabel-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CabelTypeDTOToJSON(requestParameters.cabelTypeDTO),
        };
    }

    /**
     */
    protected updateCabelTypeFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CabelTypeDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CabelTypeDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateCabelTypeRaw = async (requestParameters: UpdateCabelTypeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CabelTypeDTO>> => {
        const context = this.updateCabelTypeRequestOpts(requestParameters);
        return this.updateCabelTypeFetch(context, initOverrides);
    }

    /**
     */
    updateCabelType = async (id: number, cabelTypeDTO: CabelTypeDTO, initOverrides?: RequestInit): Promise<CabelTypeDTO> => {
        const response = await this.updateCabelTypeRaw({ id: id, cabelTypeDTO: cabelTypeDTO }, initOverrides);
        return await response.value();
    }



}
