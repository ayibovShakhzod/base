/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    ManagedUserVM,
    ManagedUserVMFromJSON,
    ManagedUserVMToJSON,
    PasswordChangeDTO,
    PasswordChangeDTOFromJSON,
    PasswordChangeDTOToJSON,
    UserDTO,
    UserDTOFromJSON,
    UserDTOToJSON,
} from '../models';

export interface ChangePasswordRequest {
    passwordChangeDTO: PasswordChangeDTO;
}

export interface RegisterAccountRequest {
    managedUserVM: ManagedUserVM;
}

export interface SaveAccountRequest {
    userDTO: UserDTO;
}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI {

    /**
     * Changes the current user\'s password.
     */
    protected changePasswordRequestOpts = (requestParameters: ChangePasswordRequest): runtime.RequestOpts => {
        if (requestParameters.passwordChangeDTO === null || requestParameters.passwordChangeDTO === undefined) {
            throw new runtime.RequiredError('passwordChangeDTO','Required parameter requestParameters.passwordChangeDTO was null or undefined when calling changePassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/account/change-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordChangeDTOToJSON(requestParameters.passwordChangeDTO),
        };
    }

    /**
     * Changes the current user\'s password.
     */
    protected changePasswordFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Changes the current user\'s password.
     */
    protected changePasswordRaw = async (requestParameters: ChangePasswordRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.changePasswordRequestOpts(requestParameters);
        return this.changePasswordFetch(context, initOverrides);
    }

    /**
     * Changes the current user\'s password.
     */
    changePassword = async (passwordChangeDTO: PasswordChangeDTO, initOverrides?: RequestInit): Promise<void> => {
        await this.changePasswordRaw({ passwordChangeDTO: passwordChangeDTO }, initOverrides);
    }



    /**
     * Get the current user
     */
    protected getAccountRequestOpts = (): runtime.RequestOpts => {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/account`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     * Get the current user
     */
    protected getAccountFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOFromJSON(jsonValue));
    }

    /**
     * Get the current user
     */
    protected getAccountRaw = async (initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserDTO>> => {
        const context = this.getAccountRequestOpts();
        return this.getAccountFetch(context, initOverrides);
    }

    /**
     * Get the current user
     */
    getAccount = async (initOverrides?: RequestInit): Promise<UserDTO> => {
        const response = await this.getAccountRaw(initOverrides);
        return await response.value();
    }


    /**
     * Get the current user
     */
    useGetAccount = (() => {
        const key = () => this.getAccountRequestOpts();
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAccountFetch(context));
        const fn = (config?: SWRConfiguration<UserDTO>): SWRResponse<UserDTO> => {
            return useSWR<UserDTO>(() => key(), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     * Gets a list of all roles.
     */
    protected getAuthoritiesRequestOpts = (): runtime.RequestOpts => {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/authorities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     * Gets a list of all roles.
     */
    protected getAuthoritiesFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<string>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets a list of all roles.
     */
    protected getAuthoritiesRaw = async (initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<string>>> => {
        const context = this.getAuthoritiesRequestOpts();
        return this.getAuthoritiesFetch(context, initOverrides);
    }

    /**
     * Gets a list of all roles.
     */
    getAuthorities = async (initOverrides?: RequestInit): Promise<Array<string>> => {
        const response = await this.getAuthoritiesRaw(initOverrides);
        return await response.value();
    }


    /**
     * Gets a list of all roles.
     */
    useGetAuthorities = (() => {
        const key = () => this.getAuthoritiesRequestOpts();
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAuthoritiesFetch(context));
        const fn = (config?: SWRConfiguration<Array<string>>): SWRResponse<Array<string>> => {
            return useSWR<Array<string>>(() => key(), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     * Check if the user is authenticated, and return its login
     */
    protected isAuthenticatedRequestOpts = (): runtime.RequestOpts => {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/authenticate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     * Check if the user is authenticated, and return its login
     */
    protected isAuthenticatedFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if the user is authenticated, and return its login
     */
    protected isAuthenticatedRaw = async (initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> => {
        const context = this.isAuthenticatedRequestOpts();
        return this.isAuthenticatedFetch(context, initOverrides);
    }

    /**
     * Check if the user is authenticated, and return its login
     */
    isAuthenticated = async (initOverrides?: RequestInit): Promise<string> => {
        const response = await this.isAuthenticatedRaw(initOverrides);
        return await response.value();
    }


    /**
     * Check if the user is authenticated, and return its login
     */
    useIsAuthenticated = (() => {
        const key = () => this.isAuthenticatedRequestOpts();
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.isAuthenticatedFetch(context));
        const fn = (config?: SWRConfiguration<string>): SWRResponse<string> => {
            return useSWR<string>(() => key(), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     * Register the user
     */
    protected registerAccountRequestOpts = (requestParameters: RegisterAccountRequest): runtime.RequestOpts => {
        if (requestParameters.managedUserVM === null || requestParameters.managedUserVM === undefined) {
            throw new runtime.RequiredError('managedUserVM','Required parameter requestParameters.managedUserVM was null or undefined when calling registerAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ManagedUserVMToJSON(requestParameters.managedUserVM),
        };
    }

    /**
     * Register the user
     */
    protected registerAccountFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Register the user
     */
    protected registerAccountRaw = async (requestParameters: RegisterAccountRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.registerAccountRequestOpts(requestParameters);
        return this.registerAccountFetch(context, initOverrides);
    }

    /**
     * Register the user
     */
    registerAccount = async (managedUserVM: ManagedUserVM, initOverrides?: RequestInit): Promise<void> => {
        await this.registerAccountRaw({ managedUserVM: managedUserVM }, initOverrides);
    }



    /**
     * Update the current user information.
     */
    protected saveAccountRequestOpts = (requestParameters: SaveAccountRequest): runtime.RequestOpts => {
        if (requestParameters.userDTO === null || requestParameters.userDTO === undefined) {
            throw new runtime.RequiredError('userDTO','Required parameter requestParameters.userDTO was null or undefined when calling saveAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserDTOToJSON(requestParameters.userDTO),
        };
    }

    /**
     * Update the current user information.
     */
    protected saveAccountFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the current user information.
     */
    protected saveAccountRaw = async (requestParameters: SaveAccountRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.saveAccountRequestOpts(requestParameters);
        return this.saveAccountFetch(context, initOverrides);
    }

    /**
     * Update the current user information.
     */
    saveAccount = async (userDTO: UserDTO, initOverrides?: RequestInit): Promise<void> => {
        await this.saveAccountRaw({ userDTO: userDTO }, initOverrides);
    }



}
