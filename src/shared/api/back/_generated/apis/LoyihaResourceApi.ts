/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    LoyihaDTO,
    LoyihaDTOFromJSON,
    LoyihaDTOToJSON,
} from '../models';

export interface CreateLoyihaRequest {
    loyihaDTO: LoyihaDTO;
}

export interface DeleteLoyihaRequest {
    id: number;
}

export interface GetAllLoyihasRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetLoyihaRequest {
    id: number;
}

export interface PartialUpdateLoyihaRequest {
    id: number;
    loyihaDTO: LoyihaDTO;
}

export interface UpdateLoyihaRequest {
    id: number;
    loyihaDTO: LoyihaDTO;
}

/**
 * 
 */
export class LoyihaResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createLoyihaRequestOpts = (requestParameters: CreateLoyihaRequest): runtime.RequestOpts => {
        if (requestParameters.loyihaDTO === null || requestParameters.loyihaDTO === undefined) {
            throw new runtime.RequiredError('loyihaDTO','Required parameter requestParameters.loyihaDTO was null or undefined when calling createLoyiha.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/api/loyihas`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoyihaDTOToJSON(requestParameters.loyihaDTO),
        };
    }

    /**
     */
    protected createLoyihaFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LoyihaDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoyihaDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createLoyihaRaw = async (requestParameters: CreateLoyihaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LoyihaDTO>> => {
        const context = this.createLoyihaRequestOpts(requestParameters);
        return this.createLoyihaFetch(context, initOverrides);
    }

    /**
     */
    createLoyiha = async (loyihaDTO: LoyihaDTO, initOverrides?: RequestInit): Promise<LoyihaDTO> => {
        const response = await this.createLoyihaRaw({ loyihaDTO: loyihaDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteLoyihaRequestOpts = (requestParameters: DeleteLoyihaRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteLoyiha.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/api/loyihas/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteLoyihaFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteLoyihaRaw = async (requestParameters: DeleteLoyihaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteLoyihaRequestOpts(requestParameters);
        return this.deleteLoyihaFetch(context, initOverrides);
    }

    /**
     */
    deleteLoyiha = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteLoyihaRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAllLoyihasRequestOpts = (requestParameters: GetAllLoyihasRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/api/loyihas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllLoyihasFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<LoyihaDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LoyihaDTOFromJSON));
    }

    /**
     */
    protected getAllLoyihasRaw = async (requestParameters: GetAllLoyihasRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<LoyihaDTO>>> => {
        const context = this.getAllLoyihasRequestOpts(requestParameters);
        return this.getAllLoyihasFetch(context, initOverrides);
    }

    /**
     */
    getAllLoyihas = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<LoyihaDTO>> => {
        const response = await this.getAllLoyihasRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllLoyihas = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllLoyihasRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllLoyihasFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<LoyihaDTO>>): SWRResponse<Array<LoyihaDTO>> => {
            return useSWR<Array<LoyihaDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getLoyihaRequestOpts = (requestParameters: GetLoyihaRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getLoyiha.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/api/loyihas/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getLoyihaFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LoyihaDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoyihaDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getLoyihaRaw = async (requestParameters: GetLoyihaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LoyihaDTO>> => {
        const context = this.getLoyihaRequestOpts(requestParameters);
        return this.getLoyihaFetch(context, initOverrides);
    }

    /**
     */
    getLoyiha = async (id: number, initOverrides?: RequestInit): Promise<LoyihaDTO> => {
        const response = await this.getLoyihaRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetLoyiha = (() => {
        const key = (id: number) => this.getLoyihaRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getLoyihaFetch(context));
        const fn = (id: number, config?: SWRConfiguration<LoyihaDTO>): SWRResponse<LoyihaDTO> => {
            return useSWR<LoyihaDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateLoyihaRequestOpts = (requestParameters: PartialUpdateLoyihaRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateLoyiha.');
        }

        if (requestParameters.loyihaDTO === null || requestParameters.loyihaDTO === undefined) {
            throw new runtime.RequiredError('loyihaDTO','Required parameter requestParameters.loyihaDTO was null or undefined when calling partialUpdateLoyiha.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/api/loyihas/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LoyihaDTOToJSON(requestParameters.loyihaDTO),
        };
    }

    /**
     */
    protected partialUpdateLoyihaFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LoyihaDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoyihaDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateLoyihaRaw = async (requestParameters: PartialUpdateLoyihaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LoyihaDTO>> => {
        const context = this.partialUpdateLoyihaRequestOpts(requestParameters);
        return this.partialUpdateLoyihaFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateLoyiha = async (id: number, loyihaDTO: LoyihaDTO, initOverrides?: RequestInit): Promise<LoyihaDTO> => {
        const response = await this.partialUpdateLoyihaRaw({ id: id, loyihaDTO: loyihaDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateLoyihaRequestOpts = (requestParameters: UpdateLoyihaRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateLoyiha.');
        }

        if (requestParameters.loyihaDTO === null || requestParameters.loyihaDTO === undefined) {
            throw new runtime.RequiredError('loyihaDTO','Required parameter requestParameters.loyihaDTO was null or undefined when calling updateLoyiha.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/api/loyihas/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LoyihaDTOToJSON(requestParameters.loyihaDTO),
        };
    }

    /**
     */
    protected updateLoyihaFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LoyihaDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoyihaDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateLoyihaRaw = async (requestParameters: UpdateLoyihaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LoyihaDTO>> => {
        const context = this.updateLoyihaRequestOpts(requestParameters);
        return this.updateLoyihaFetch(context, initOverrides);
    }

    /**
     */
    updateLoyiha = async (id: number, loyihaDTO: LoyihaDTO, initOverrides?: RequestInit): Promise<LoyihaDTO> => {
        const response = await this.updateLoyihaRaw({ id: id, loyihaDTO: loyihaDTO }, initOverrides);
        return await response.value();
    }



}
