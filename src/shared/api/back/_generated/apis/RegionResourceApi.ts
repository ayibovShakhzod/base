/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    RegionDTO,
    RegionDTOFromJSON,
    RegionDTOToJSON,
} from '../models';

export interface CreateRegionRequest {
    regionDTO: RegionDTO;
}

export interface DeleteRegionRequest {
    id: number;
}

export interface GetAllRegionsRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetRegionRequest {
    id: number;
}

export interface PartialUpdateRegionRequest {
    id: number;
    regionDTO: RegionDTO;
}

export interface UpdateRegionRequest {
    id: number;
    regionDTO: RegionDTO;
}

/**
 * 
 */
export class RegionResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createRegionRequestOpts = (requestParameters: CreateRegionRequest): runtime.RequestOpts => {
        if (requestParameters.regionDTO === null || requestParameters.regionDTO === undefined) {
            throw new runtime.RequiredError('regionDTO','Required parameter requestParameters.regionDTO was null or undefined when calling createRegion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/regions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegionDTOToJSON(requestParameters.regionDTO),
        };
    }

    /**
     */
    protected createRegionFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RegionDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createRegionRaw = async (requestParameters: CreateRegionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RegionDTO>> => {
        const context = this.createRegionRequestOpts(requestParameters);
        return this.createRegionFetch(context, initOverrides);
    }

    /**
     */
    createRegion = async (regionDTO: RegionDTO, initOverrides?: RequestInit): Promise<RegionDTO> => {
        const response = await this.createRegionRaw({ regionDTO: regionDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteRegionRequestOpts = (requestParameters: DeleteRegionRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRegion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/regions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteRegionFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteRegionRaw = async (requestParameters: DeleteRegionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteRegionRequestOpts(requestParameters);
        return this.deleteRegionFetch(context, initOverrides);
    }

    /**
     */
    deleteRegion = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteRegionRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAllRegionsRequestOpts = (requestParameters: GetAllRegionsRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/regions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllRegionsFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<RegionDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RegionDTOFromJSON));
    }

    /**
     */
    protected getAllRegionsRaw = async (requestParameters: GetAllRegionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<RegionDTO>>> => {
        const context = this.getAllRegionsRequestOpts(requestParameters);
        return this.getAllRegionsFetch(context, initOverrides);
    }

    /**
     */
    getAllRegions = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<RegionDTO>> => {
        const response = await this.getAllRegionsRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllRegions = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllRegionsRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllRegionsFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<RegionDTO>>): SWRResponse<Array<RegionDTO>> => {
            return useSWR<Array<RegionDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getRegionRequestOpts = (requestParameters: GetRegionRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRegion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/regions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getRegionFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RegionDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getRegionRaw = async (requestParameters: GetRegionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RegionDTO>> => {
        const context = this.getRegionRequestOpts(requestParameters);
        return this.getRegionFetch(context, initOverrides);
    }

    /**
     */
    getRegion = async (id: number, initOverrides?: RequestInit): Promise<RegionDTO> => {
        const response = await this.getRegionRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetRegion = (() => {
        const key = (id: number) => this.getRegionRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getRegionFetch(context));
        const fn = (id: number, config?: SWRConfiguration<RegionDTO>): SWRResponse<RegionDTO> => {
            return useSWR<RegionDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateRegionRequestOpts = (requestParameters: PartialUpdateRegionRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateRegion.');
        }

        if (requestParameters.regionDTO === null || requestParameters.regionDTO === undefined) {
            throw new runtime.RequiredError('regionDTO','Required parameter requestParameters.regionDTO was null or undefined when calling partialUpdateRegion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/regions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RegionDTOToJSON(requestParameters.regionDTO),
        };
    }

    /**
     */
    protected partialUpdateRegionFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RegionDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateRegionRaw = async (requestParameters: PartialUpdateRegionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RegionDTO>> => {
        const context = this.partialUpdateRegionRequestOpts(requestParameters);
        return this.partialUpdateRegionFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateRegion = async (id: number, regionDTO: RegionDTO, initOverrides?: RequestInit): Promise<RegionDTO> => {
        const response = await this.partialUpdateRegionRaw({ id: id, regionDTO: regionDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateRegionRequestOpts = (requestParameters: UpdateRegionRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRegion.');
        }

        if (requestParameters.regionDTO === null || requestParameters.regionDTO === undefined) {
            throw new runtime.RequiredError('regionDTO','Required parameter requestParameters.regionDTO was null or undefined when calling updateRegion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/regions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RegionDTOToJSON(requestParameters.regionDTO),
        };
    }

    /**
     */
    protected updateRegionFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RegionDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateRegionRaw = async (requestParameters: UpdateRegionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RegionDTO>> => {
        const context = this.updateRegionRequestOpts(requestParameters);
        return this.updateRegionFetch(context, initOverrides);
    }

    /**
     */
    updateRegion = async (id: number, regionDTO: RegionDTO, initOverrides?: RequestInit): Promise<RegionDTO> => {
        const response = await this.updateRegionRaw({ id: id, regionDTO: regionDTO }, initOverrides);
        return await response.value();
    }



}
