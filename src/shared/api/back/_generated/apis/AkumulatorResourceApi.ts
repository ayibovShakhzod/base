/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    AkumulatorDTO,
    AkumulatorDTOFromJSON,
    AkumulatorDTOToJSON,
} from '../models';

export interface CreateAkumulatorRequest {
    akumulatorDTO: AkumulatorDTO;
}

export interface DeleteAkumulatorRequest {
    id: number;
}

export interface GetAkumulatorRequest {
    id: number;
}

export interface GetAllAkumulatorsRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetAllByObyekt12Request {
    obyektId: number;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PartialUpdateAkumulatorRequest {
    id: number;
    akumulatorDTO: AkumulatorDTO;
}

export interface UpdateAkumulatorRequest {
    id: number;
    akumulatorDTO: AkumulatorDTO;
}

/**
 * 
 */
export class AkumulatorResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createAkumulatorRequestOpts = (requestParameters: CreateAkumulatorRequest): runtime.RequestOpts => {
        if (requestParameters.akumulatorDTO === null || requestParameters.akumulatorDTO === undefined) {
            throw new runtime.RequiredError('akumulatorDTO','Required parameter requestParameters.akumulatorDTO was null or undefined when calling createAkumulator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/akumulators`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AkumulatorDTOToJSON(requestParameters.akumulatorDTO),
        };
    }

    /**
     */
    protected createAkumulatorFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AkumulatorDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AkumulatorDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createAkumulatorRaw = async (requestParameters: CreateAkumulatorRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AkumulatorDTO>> => {
        const context = this.createAkumulatorRequestOpts(requestParameters);
        return this.createAkumulatorFetch(context, initOverrides);
    }

    /**
     */
    createAkumulator = async (akumulatorDTO: AkumulatorDTO, initOverrides?: RequestInit): Promise<AkumulatorDTO> => {
        const response = await this.createAkumulatorRaw({ akumulatorDTO: akumulatorDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteAkumulatorRequestOpts = (requestParameters: DeleteAkumulatorRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAkumulator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/akumulators/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteAkumulatorFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteAkumulatorRaw = async (requestParameters: DeleteAkumulatorRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteAkumulatorRequestOpts(requestParameters);
        return this.deleteAkumulatorFetch(context, initOverrides);
    }

    /**
     */
    deleteAkumulator = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteAkumulatorRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAkumulatorRequestOpts = (requestParameters: GetAkumulatorRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAkumulator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/akumulators/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAkumulatorFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AkumulatorDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AkumulatorDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getAkumulatorRaw = async (requestParameters: GetAkumulatorRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AkumulatorDTO>> => {
        const context = this.getAkumulatorRequestOpts(requestParameters);
        return this.getAkumulatorFetch(context, initOverrides);
    }

    /**
     */
    getAkumulator = async (id: number, initOverrides?: RequestInit): Promise<AkumulatorDTO> => {
        const response = await this.getAkumulatorRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAkumulator = (() => {
        const key = (id: number) => this.getAkumulatorRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAkumulatorFetch(context));
        const fn = (id: number, config?: SWRConfiguration<AkumulatorDTO>): SWRResponse<AkumulatorDTO> => {
            return useSWR<AkumulatorDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getAllAkumulatorsRequestOpts = (requestParameters: GetAllAkumulatorsRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/akumulators`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllAkumulatorsFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AkumulatorDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AkumulatorDTOFromJSON));
    }

    /**
     */
    protected getAllAkumulatorsRaw = async (requestParameters: GetAllAkumulatorsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AkumulatorDTO>>> => {
        const context = this.getAllAkumulatorsRequestOpts(requestParameters);
        return this.getAllAkumulatorsFetch(context, initOverrides);
    }

    /**
     */
    getAllAkumulators = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<AkumulatorDTO>> => {
        const response = await this.getAllAkumulatorsRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllAkumulators = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllAkumulatorsRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllAkumulatorsFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<AkumulatorDTO>>): SWRResponse<Array<AkumulatorDTO>> => {
            return useSWR<Array<AkumulatorDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getAllByObyekt12RequestOpts = (requestParameters: GetAllByObyekt12Request): runtime.RequestOpts => {
        if (requestParameters.obyektId === null || requestParameters.obyektId === undefined) {
            throw new runtime.RequiredError('obyektId','Required parameter requestParameters.obyektId was null or undefined when calling getAllByObyekt12.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/akumulators/obyekt/{obyektId}`.replace(`{${"obyektId"}}`, encodeURIComponent(String(requestParameters.obyektId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllByObyekt12Fetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AkumulatorDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AkumulatorDTOFromJSON));
    }

    /**
     */
    protected getAllByObyekt12Raw = async (requestParameters: GetAllByObyekt12Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AkumulatorDTO>>> => {
        const context = this.getAllByObyekt12RequestOpts(requestParameters);
        return this.getAllByObyekt12Fetch(context, initOverrides);
    }

    /**
     */
    getAllByObyekt12 = async (obyektId: number, page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<AkumulatorDTO>> => {
        const response = await this.getAllByObyekt12Raw({ obyektId: obyektId, page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllByObyekt12 = (() => {
        const key = (requestParameters: GetAllByObyekt12Request, config?: SWRConfiguration<Array<AkumulatorDTO>>) => this.getAllByObyekt12RequestOpts(requestParameters);
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllByObyekt12Fetch(context));
        const fn = (requestParameters: GetAllByObyekt12Request, config?: SWRConfiguration<Array<AkumulatorDTO>>): SWRResponse<Array<AkumulatorDTO>> => {
            return useSWR<Array<AkumulatorDTO>>(() => key(requestParameters), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateAkumulatorRequestOpts = (requestParameters: PartialUpdateAkumulatorRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateAkumulator.');
        }

        if (requestParameters.akumulatorDTO === null || requestParameters.akumulatorDTO === undefined) {
            throw new runtime.RequiredError('akumulatorDTO','Required parameter requestParameters.akumulatorDTO was null or undefined when calling partialUpdateAkumulator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/akumulators/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AkumulatorDTOToJSON(requestParameters.akumulatorDTO),
        };
    }

    /**
     */
    protected partialUpdateAkumulatorFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AkumulatorDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AkumulatorDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateAkumulatorRaw = async (requestParameters: PartialUpdateAkumulatorRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AkumulatorDTO>> => {
        const context = this.partialUpdateAkumulatorRequestOpts(requestParameters);
        return this.partialUpdateAkumulatorFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateAkumulator = async (id: number, akumulatorDTO: AkumulatorDTO, initOverrides?: RequestInit): Promise<AkumulatorDTO> => {
        const response = await this.partialUpdateAkumulatorRaw({ id: id, akumulatorDTO: akumulatorDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateAkumulatorRequestOpts = (requestParameters: UpdateAkumulatorRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAkumulator.');
        }

        if (requestParameters.akumulatorDTO === null || requestParameters.akumulatorDTO === undefined) {
            throw new runtime.RequiredError('akumulatorDTO','Required parameter requestParameters.akumulatorDTO was null or undefined when calling updateAkumulator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/akumulators/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AkumulatorDTOToJSON(requestParameters.akumulatorDTO),
        };
    }

    /**
     */
    protected updateAkumulatorFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AkumulatorDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AkumulatorDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateAkumulatorRaw = async (requestParameters: UpdateAkumulatorRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AkumulatorDTO>> => {
        const context = this.updateAkumulatorRequestOpts(requestParameters);
        return this.updateAkumulatorFetch(context, initOverrides);
    }

    /**
     */
    updateAkumulator = async (id: number, akumulatorDTO: AkumulatorDTO, initOverrides?: RequestInit): Promise<AkumulatorDTO> => {
        const response = await this.updateAkumulatorRaw({ id: id, akumulatorDTO: akumulatorDTO }, initOverrides);
        return await response.value();
    }



}
