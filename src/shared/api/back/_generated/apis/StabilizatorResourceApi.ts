/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    StabilizatorDTO,
    StabilizatorDTOFromJSON,
    StabilizatorDTOToJSON,
} from '../models';

export interface CreateStabilizatorRequest {
    stabilizatorDTO: StabilizatorDTO;
}

export interface DeleteStabilizatorRequest {
    id: number;
}

export interface GetAllByObyekt5Request {
    obyektId: number;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetAllStabilizatorsRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetStabilizatorRequest {
    id: number;
}

export interface PartialUpdateStabilizatorRequest {
    id: number;
    stabilizatorDTO: StabilizatorDTO;
}

export interface UpdateStabilizatorRequest {
    id: number;
    stabilizatorDTO: StabilizatorDTO;
}

/**
 * 
 */
export class StabilizatorResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createStabilizatorRequestOpts = (requestParameters: CreateStabilizatorRequest): runtime.RequestOpts => {
        if (requestParameters.stabilizatorDTO === null || requestParameters.stabilizatorDTO === undefined) {
            throw new runtime.RequiredError('stabilizatorDTO','Required parameter requestParameters.stabilizatorDTO was null or undefined when calling createStabilizator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/stabilizators`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StabilizatorDTOToJSON(requestParameters.stabilizatorDTO),
        };
    }

    /**
     */
    protected createStabilizatorFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StabilizatorDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StabilizatorDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createStabilizatorRaw = async (requestParameters: CreateStabilizatorRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StabilizatorDTO>> => {
        const context = this.createStabilizatorRequestOpts(requestParameters);
        return this.createStabilizatorFetch(context, initOverrides);
    }

    /**
     */
    createStabilizator = async (stabilizatorDTO: StabilizatorDTO, initOverrides?: RequestInit): Promise<StabilizatorDTO> => {
        const response = await this.createStabilizatorRaw({ stabilizatorDTO: stabilizatorDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteStabilizatorRequestOpts = (requestParameters: DeleteStabilizatorRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStabilizator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/stabilizators/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteStabilizatorFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteStabilizatorRaw = async (requestParameters: DeleteStabilizatorRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteStabilizatorRequestOpts(requestParameters);
        return this.deleteStabilizatorFetch(context, initOverrides);
    }

    /**
     */
    deleteStabilizator = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteStabilizatorRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAllByObyekt5RequestOpts = (requestParameters: GetAllByObyekt5Request): runtime.RequestOpts => {
        if (requestParameters.obyektId === null || requestParameters.obyektId === undefined) {
            throw new runtime.RequiredError('obyektId','Required parameter requestParameters.obyektId was null or undefined when calling getAllByObyekt5.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/stabilizators/obyekt/{obyektId}`.replace(`{${"obyektId"}}`, encodeURIComponent(String(requestParameters.obyektId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllByObyekt5Fetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StabilizatorDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StabilizatorDTOFromJSON));
    }

    /**
     */
    protected getAllByObyekt5Raw = async (requestParameters: GetAllByObyekt5Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StabilizatorDTO>>> => {
        const context = this.getAllByObyekt5RequestOpts(requestParameters);
        return this.getAllByObyekt5Fetch(context, initOverrides);
    }

    /**
     */
    getAllByObyekt5 = async (obyektId: number, page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<StabilizatorDTO>> => {
        const response = await this.getAllByObyekt5Raw({ obyektId: obyektId, page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllByObyekt5 = (() => {
        const key = (requestParameters: GetAllByObyekt5Request, config?: SWRConfiguration<Array<StabilizatorDTO>>) => this.getAllByObyekt5RequestOpts(requestParameters);
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllByObyekt5Fetch(context));
        const fn = (requestParameters: GetAllByObyekt5Request, config?: SWRConfiguration<Array<StabilizatorDTO>>): SWRResponse<Array<StabilizatorDTO>> => {
            return useSWR<Array<StabilizatorDTO>>(() => key(requestParameters), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getAllStabilizatorsRequestOpts = (requestParameters: GetAllStabilizatorsRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/stabilizators`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllStabilizatorsFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StabilizatorDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StabilizatorDTOFromJSON));
    }

    /**
     */
    protected getAllStabilizatorsRaw = async (requestParameters: GetAllStabilizatorsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StabilizatorDTO>>> => {
        const context = this.getAllStabilizatorsRequestOpts(requestParameters);
        return this.getAllStabilizatorsFetch(context, initOverrides);
    }

    /**
     */
    getAllStabilizators = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<StabilizatorDTO>> => {
        const response = await this.getAllStabilizatorsRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllStabilizators = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllStabilizatorsRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllStabilizatorsFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<StabilizatorDTO>>): SWRResponse<Array<StabilizatorDTO>> => {
            return useSWR<Array<StabilizatorDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getStabilizatorRequestOpts = (requestParameters: GetStabilizatorRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStabilizator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/stabilizators/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getStabilizatorFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StabilizatorDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StabilizatorDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getStabilizatorRaw = async (requestParameters: GetStabilizatorRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StabilizatorDTO>> => {
        const context = this.getStabilizatorRequestOpts(requestParameters);
        return this.getStabilizatorFetch(context, initOverrides);
    }

    /**
     */
    getStabilizator = async (id: number, initOverrides?: RequestInit): Promise<StabilizatorDTO> => {
        const response = await this.getStabilizatorRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetStabilizator = (() => {
        const key = (id: number) => this.getStabilizatorRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getStabilizatorFetch(context));
        const fn = (id: number, config?: SWRConfiguration<StabilizatorDTO>): SWRResponse<StabilizatorDTO> => {
            return useSWR<StabilizatorDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateStabilizatorRequestOpts = (requestParameters: PartialUpdateStabilizatorRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateStabilizator.');
        }

        if (requestParameters.stabilizatorDTO === null || requestParameters.stabilizatorDTO === undefined) {
            throw new runtime.RequiredError('stabilizatorDTO','Required parameter requestParameters.stabilizatorDTO was null or undefined when calling partialUpdateStabilizator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/stabilizators/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: StabilizatorDTOToJSON(requestParameters.stabilizatorDTO),
        };
    }

    /**
     */
    protected partialUpdateStabilizatorFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StabilizatorDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StabilizatorDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateStabilizatorRaw = async (requestParameters: PartialUpdateStabilizatorRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StabilizatorDTO>> => {
        const context = this.partialUpdateStabilizatorRequestOpts(requestParameters);
        return this.partialUpdateStabilizatorFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateStabilizator = async (id: number, stabilizatorDTO: StabilizatorDTO, initOverrides?: RequestInit): Promise<StabilizatorDTO> => {
        const response = await this.partialUpdateStabilizatorRaw({ id: id, stabilizatorDTO: stabilizatorDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateStabilizatorRequestOpts = (requestParameters: UpdateStabilizatorRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateStabilizator.');
        }

        if (requestParameters.stabilizatorDTO === null || requestParameters.stabilizatorDTO === undefined) {
            throw new runtime.RequiredError('stabilizatorDTO','Required parameter requestParameters.stabilizatorDTO was null or undefined when calling updateStabilizator.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/stabilizators/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StabilizatorDTOToJSON(requestParameters.stabilizatorDTO),
        };
    }

    /**
     */
    protected updateStabilizatorFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StabilizatorDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StabilizatorDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateStabilizatorRaw = async (requestParameters: UpdateStabilizatorRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StabilizatorDTO>> => {
        const context = this.updateStabilizatorRequestOpts(requestParameters);
        return this.updateStabilizatorFetch(context, initOverrides);
    }

    /**
     */
    updateStabilizator = async (id: number, stabilizatorDTO: StabilizatorDTO, initOverrides?: RequestInit): Promise<StabilizatorDTO> => {
        const response = await this.updateStabilizatorRaw({ id: id, stabilizatorDTO: stabilizatorDTO }, initOverrides);
        return await response.value();
    }



}
