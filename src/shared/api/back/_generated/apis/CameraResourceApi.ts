/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    CameraDTO,
    CameraDTOFromJSON,
    CameraDTOToJSON,
} from '../models';

export interface CreateCameraRequest {
    cameraDTO: CameraDTO;
}

export interface DeleteCameraRequest {
    id: number;
}

export interface GetAllByBrandRequest {
    brandId: number;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetAllByType4Request {
    typeId: number;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetAllCamerasRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetCameraRequest {
    id: number;
}

export interface PartialUpdateCameraRequest {
    id: number;
    cameraDTO: CameraDTO;
}

export interface UpdateCameraRequest {
    id: number;
    cameraDTO: CameraDTO;
}

/**
 * 
 */
export class CameraResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createCameraRequestOpts = (requestParameters: CreateCameraRequest): runtime.RequestOpts => {
        if (requestParameters.cameraDTO === null || requestParameters.cameraDTO === undefined) {
            throw new runtime.RequiredError('cameraDTO','Required parameter requestParameters.cameraDTO was null or undefined when calling createCamera.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cameras`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CameraDTOToJSON(requestParameters.cameraDTO),
        };
    }

    /**
     */
    protected createCameraFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CameraDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createCameraRaw = async (requestParameters: CreateCameraRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraDTO>> => {
        const context = this.createCameraRequestOpts(requestParameters);
        return this.createCameraFetch(context, initOverrides);
    }

    /**
     */
    createCamera = async (cameraDTO: CameraDTO, initOverrides?: RequestInit): Promise<CameraDTO> => {
        const response = await this.createCameraRaw({ cameraDTO: cameraDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteCameraRequestOpts = (requestParameters: DeleteCameraRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCamera.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cameras/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteCameraFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteCameraRaw = async (requestParameters: DeleteCameraRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteCameraRequestOpts(requestParameters);
        return this.deleteCameraFetch(context, initOverrides);
    }

    /**
     */
    deleteCamera = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteCameraRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAllByBrandRequestOpts = (requestParameters: GetAllByBrandRequest): runtime.RequestOpts => {
        if (requestParameters.brandId === null || requestParameters.brandId === undefined) {
            throw new runtime.RequiredError('brandId','Required parameter requestParameters.brandId was null or undefined when calling getAllByBrand.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cameras/brand/{brandId}`.replace(`{${"brandId"}}`, encodeURIComponent(String(requestParameters.brandId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllByBrandFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CameraDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CameraDTOFromJSON));
    }

    /**
     */
    protected getAllByBrandRaw = async (requestParameters: GetAllByBrandRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CameraDTO>>> => {
        const context = this.getAllByBrandRequestOpts(requestParameters);
        return this.getAllByBrandFetch(context, initOverrides);
    }

    /**
     */
    getAllByBrand = async (brandId: number, page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<CameraDTO>> => {
        const response = await this.getAllByBrandRaw({ brandId: brandId, page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllByBrand = (() => {
        const key = (requestParameters: GetAllByBrandRequest, config?: SWRConfiguration<Array<CameraDTO>>) => this.getAllByBrandRequestOpts(requestParameters);
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllByBrandFetch(context));
        const fn = (requestParameters: GetAllByBrandRequest, config?: SWRConfiguration<Array<CameraDTO>>): SWRResponse<Array<CameraDTO>> => {
            return useSWR<Array<CameraDTO>>(() => key(requestParameters), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getAllByType4RequestOpts = (requestParameters: GetAllByType4Request): runtime.RequestOpts => {
        if (requestParameters.typeId === null || requestParameters.typeId === undefined) {
            throw new runtime.RequiredError('typeId','Required parameter requestParameters.typeId was null or undefined when calling getAllByType4.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cameras/type/{typeId}`.replace(`{${"typeId"}}`, encodeURIComponent(String(requestParameters.typeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllByType4Fetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CameraDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CameraDTOFromJSON));
    }

    /**
     */
    protected getAllByType4Raw = async (requestParameters: GetAllByType4Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CameraDTO>>> => {
        const context = this.getAllByType4RequestOpts(requestParameters);
        return this.getAllByType4Fetch(context, initOverrides);
    }

    /**
     */
    getAllByType4 = async (typeId: number, page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<CameraDTO>> => {
        const response = await this.getAllByType4Raw({ typeId: typeId, page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllByType4 = (() => {
        const key = (requestParameters: GetAllByType4Request, config?: SWRConfiguration<Array<CameraDTO>>) => this.getAllByType4RequestOpts(requestParameters);
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllByType4Fetch(context));
        const fn = (requestParameters: GetAllByType4Request, config?: SWRConfiguration<Array<CameraDTO>>): SWRResponse<Array<CameraDTO>> => {
            return useSWR<Array<CameraDTO>>(() => key(requestParameters), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getAllCamerasRequestOpts = (requestParameters: GetAllCamerasRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cameras`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllCamerasFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CameraDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CameraDTOFromJSON));
    }

    /**
     */
    protected getAllCamerasRaw = async (requestParameters: GetAllCamerasRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CameraDTO>>> => {
        const context = this.getAllCamerasRequestOpts(requestParameters);
        return this.getAllCamerasFetch(context, initOverrides);
    }

    /**
     */
    getAllCameras = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<CameraDTO>> => {
        const response = await this.getAllCamerasRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllCameras = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllCamerasRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllCamerasFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<CameraDTO>>): SWRResponse<Array<CameraDTO>> => {
            return useSWR<Array<CameraDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getCameraRequestOpts = (requestParameters: GetCameraRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCamera.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cameras/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getCameraFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CameraDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getCameraRaw = async (requestParameters: GetCameraRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraDTO>> => {
        const context = this.getCameraRequestOpts(requestParameters);
        return this.getCameraFetch(context, initOverrides);
    }

    /**
     */
    getCamera = async (id: number, initOverrides?: RequestInit): Promise<CameraDTO> => {
        const response = await this.getCameraRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetCamera = (() => {
        const key = (id: number) => this.getCameraRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getCameraFetch(context));
        const fn = (id: number, config?: SWRConfiguration<CameraDTO>): SWRResponse<CameraDTO> => {
            return useSWR<CameraDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateCameraRequestOpts = (requestParameters: PartialUpdateCameraRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateCamera.');
        }

        if (requestParameters.cameraDTO === null || requestParameters.cameraDTO === undefined) {
            throw new runtime.RequiredError('cameraDTO','Required parameter requestParameters.cameraDTO was null or undefined when calling partialUpdateCamera.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cameras/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CameraDTOToJSON(requestParameters.cameraDTO),
        };
    }

    /**
     */
    protected partialUpdateCameraFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CameraDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateCameraRaw = async (requestParameters: PartialUpdateCameraRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraDTO>> => {
        const context = this.partialUpdateCameraRequestOpts(requestParameters);
        return this.partialUpdateCameraFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateCamera = async (id: number, cameraDTO: CameraDTO, initOverrides?: RequestInit): Promise<CameraDTO> => {
        const response = await this.partialUpdateCameraRaw({ id: id, cameraDTO: cameraDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateCameraRequestOpts = (requestParameters: UpdateCameraRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCamera.');
        }

        if (requestParameters.cameraDTO === null || requestParameters.cameraDTO === undefined) {
            throw new runtime.RequiredError('cameraDTO','Required parameter requestParameters.cameraDTO was null or undefined when calling updateCamera.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cameras/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CameraDTOToJSON(requestParameters.cameraDTO),
        };
    }

    /**
     */
    protected updateCameraFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CameraDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateCameraRaw = async (requestParameters: UpdateCameraRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraDTO>> => {
        const context = this.updateCameraRequestOpts(requestParameters);
        return this.updateCameraFetch(context, initOverrides);
    }

    /**
     */
    updateCamera = async (id: number, cameraDTO: CameraDTO, initOverrides?: RequestInit): Promise<CameraDTO> => {
        const response = await this.updateCameraRaw({ id: id, cameraDTO: cameraDTO }, initOverrides);
        return await response.value();
    }



}
