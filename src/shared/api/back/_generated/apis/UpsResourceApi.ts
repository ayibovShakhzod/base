/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    UpsDTO,
    UpsDTOFromJSON,
    UpsDTOToJSON,
} from '../models';

export interface CreateUpsRequest {
    upsDTO: UpsDTO;
}

export interface DeleteUpsRequest {
    id: number;
}

export interface GetAllByObyektRequest {
    obyektId: number;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetAllUpsRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetUpsRequest {
    id: number;
}

export interface PartialUpdateUpsRequest {
    id: number;
    upsDTO: UpsDTO;
}

export interface UpdateUpsRequest {
    id: number;
    upsDTO: UpsDTO;
}

/**
 * 
 */
export class UpsResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createUpsRequestOpts = (requestParameters: CreateUpsRequest): runtime.RequestOpts => {
        if (requestParameters.upsDTO === null || requestParameters.upsDTO === undefined) {
            throw new runtime.RequiredError('upsDTO','Required parameter requestParameters.upsDTO was null or undefined when calling createUps.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/ups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsDTOToJSON(requestParameters.upsDTO),
        };
    }

    /**
     */
    protected createUpsFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpsDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpsDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createUpsRaw = async (requestParameters: CreateUpsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpsDTO>> => {
        const context = this.createUpsRequestOpts(requestParameters);
        return this.createUpsFetch(context, initOverrides);
    }

    /**
     */
    createUps = async (upsDTO: UpsDTO, initOverrides?: RequestInit): Promise<UpsDTO> => {
        const response = await this.createUpsRaw({ upsDTO: upsDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteUpsRequestOpts = (requestParameters: DeleteUpsRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUps.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/ups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteUpsFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteUpsRaw = async (requestParameters: DeleteUpsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteUpsRequestOpts(requestParameters);
        return this.deleteUpsFetch(context, initOverrides);
    }

    /**
     */
    deleteUps = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteUpsRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAllByObyektRequestOpts = (requestParameters: GetAllByObyektRequest): runtime.RequestOpts => {
        if (requestParameters.obyektId === null || requestParameters.obyektId === undefined) {
            throw new runtime.RequiredError('obyektId','Required parameter requestParameters.obyektId was null or undefined when calling getAllByObyekt.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/ups/obyekt/{obyektId}`.replace(`{${"obyektId"}}`, encodeURIComponent(String(requestParameters.obyektId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllByObyektFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<UpsDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UpsDTOFromJSON));
    }

    /**
     */
    protected getAllByObyektRaw = async (requestParameters: GetAllByObyektRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<UpsDTO>>> => {
        const context = this.getAllByObyektRequestOpts(requestParameters);
        return this.getAllByObyektFetch(context, initOverrides);
    }

    /**
     */
    getAllByObyekt = async (obyektId: number, page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<UpsDTO>> => {
        const response = await this.getAllByObyektRaw({ obyektId: obyektId, page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllByObyekt = (() => {
        const key = (requestParameters: GetAllByObyektRequest, config?: SWRConfiguration<Array<UpsDTO>>) => this.getAllByObyektRequestOpts(requestParameters);
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllByObyektFetch(context));
        const fn = (requestParameters: GetAllByObyektRequest, config?: SWRConfiguration<Array<UpsDTO>>): SWRResponse<Array<UpsDTO>> => {
            return useSWR<Array<UpsDTO>>(() => key(requestParameters), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getAllUpsRequestOpts = (requestParameters: GetAllUpsRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/ups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllUpsFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<UpsDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UpsDTOFromJSON));
    }

    /**
     */
    protected getAllUpsRaw = async (requestParameters: GetAllUpsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<UpsDTO>>> => {
        const context = this.getAllUpsRequestOpts(requestParameters);
        return this.getAllUpsFetch(context, initOverrides);
    }

    /**
     */
    getAllUps = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<UpsDTO>> => {
        const response = await this.getAllUpsRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllUps = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllUpsRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllUpsFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<UpsDTO>>): SWRResponse<Array<UpsDTO>> => {
            return useSWR<Array<UpsDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getUpsRequestOpts = (requestParameters: GetUpsRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUps.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/ups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getUpsFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpsDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpsDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getUpsRaw = async (requestParameters: GetUpsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpsDTO>> => {
        const context = this.getUpsRequestOpts(requestParameters);
        return this.getUpsFetch(context, initOverrides);
    }

    /**
     */
    getUps = async (id: number, initOverrides?: RequestInit): Promise<UpsDTO> => {
        const response = await this.getUpsRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetUps = (() => {
        const key = (id: number) => this.getUpsRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getUpsFetch(context));
        const fn = (id: number, config?: SWRConfiguration<UpsDTO>): SWRResponse<UpsDTO> => {
            return useSWR<UpsDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateUpsRequestOpts = (requestParameters: PartialUpdateUpsRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateUps.');
        }

        if (requestParameters.upsDTO === null || requestParameters.upsDTO === undefined) {
            throw new runtime.RequiredError('upsDTO','Required parameter requestParameters.upsDTO was null or undefined when calling partialUpdateUps.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/ups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpsDTOToJSON(requestParameters.upsDTO),
        };
    }

    /**
     */
    protected partialUpdateUpsFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpsDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpsDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateUpsRaw = async (requestParameters: PartialUpdateUpsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpsDTO>> => {
        const context = this.partialUpdateUpsRequestOpts(requestParameters);
        return this.partialUpdateUpsFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateUps = async (id: number, upsDTO: UpsDTO, initOverrides?: RequestInit): Promise<UpsDTO> => {
        const response = await this.partialUpdateUpsRaw({ id: id, upsDTO: upsDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateUpsRequestOpts = (requestParameters: UpdateUpsRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUps.');
        }

        if (requestParameters.upsDTO === null || requestParameters.upsDTO === undefined) {
            throw new runtime.RequiredError('upsDTO','Required parameter requestParameters.upsDTO was null or undefined when calling updateUps.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/ups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpsDTOToJSON(requestParameters.upsDTO),
        };
    }

    /**
     */
    protected updateUpsFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpsDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpsDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateUpsRaw = async (requestParameters: UpdateUpsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpsDTO>> => {
        const context = this.updateUpsRequestOpts(requestParameters);
        return this.updateUpsFetch(context, initOverrides);
    }

    /**
     */
    updateUps = async (id: number, upsDTO: UpsDTO, initOverrides?: RequestInit): Promise<UpsDTO> => {
        const response = await this.updateUpsRaw({ id: id, upsDTO: upsDTO }, initOverrides);
        return await response.value();
    }



}
