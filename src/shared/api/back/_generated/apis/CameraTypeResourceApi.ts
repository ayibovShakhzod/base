/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    CameraTypeDTO,
    CameraTypeDTOFromJSON,
    CameraTypeDTOToJSON,
} from '../models';

export interface CreateCameraTypeRequest {
    cameraTypeDTO: CameraTypeDTO;
}

export interface DeleteCameraTypeRequest {
    id: number;
}

export interface GetAllCameraTypesRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetCameraTypeRequest {
    id: number;
}

export interface PartialUpdateCameraTypeRequest {
    id: number;
    cameraTypeDTO: CameraTypeDTO;
}

export interface UpdateCameraTypeRequest {
    id: number;
    cameraTypeDTO: CameraTypeDTO;
}

/**
 * 
 */
export class CameraTypeResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createCameraTypeRequestOpts = (requestParameters: CreateCameraTypeRequest): runtime.RequestOpts => {
        if (requestParameters.cameraTypeDTO === null || requestParameters.cameraTypeDTO === undefined) {
            throw new runtime.RequiredError('cameraTypeDTO','Required parameter requestParameters.cameraTypeDTO was null or undefined when calling createCameraType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/api/camera-types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CameraTypeDTOToJSON(requestParameters.cameraTypeDTO),
        };
    }

    /**
     */
    protected createCameraTypeFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraTypeDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CameraTypeDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createCameraTypeRaw = async (requestParameters: CreateCameraTypeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraTypeDTO>> => {
        const context = this.createCameraTypeRequestOpts(requestParameters);
        return this.createCameraTypeFetch(context, initOverrides);
    }

    /**
     */
    createCameraType = async (cameraTypeDTO: CameraTypeDTO, initOverrides?: RequestInit): Promise<CameraTypeDTO> => {
        const response = await this.createCameraTypeRaw({ cameraTypeDTO: cameraTypeDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteCameraTypeRequestOpts = (requestParameters: DeleteCameraTypeRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCameraType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/api/camera-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteCameraTypeFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteCameraTypeRaw = async (requestParameters: DeleteCameraTypeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteCameraTypeRequestOpts(requestParameters);
        return this.deleteCameraTypeFetch(context, initOverrides);
    }

    /**
     */
    deleteCameraType = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteCameraTypeRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAllCameraTypesRequestOpts = (requestParameters: GetAllCameraTypesRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/api/camera-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllCameraTypesFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CameraTypeDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CameraTypeDTOFromJSON));
    }

    /**
     */
    protected getAllCameraTypesRaw = async (requestParameters: GetAllCameraTypesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CameraTypeDTO>>> => {
        const context = this.getAllCameraTypesRequestOpts(requestParameters);
        return this.getAllCameraTypesFetch(context, initOverrides);
    }

    /**
     */
    getAllCameraTypes = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<CameraTypeDTO>> => {
        const response = await this.getAllCameraTypesRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllCameraTypes = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllCameraTypesRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllCameraTypesFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<CameraTypeDTO>>): SWRResponse<Array<CameraTypeDTO>> => {
            return useSWR<Array<CameraTypeDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getCameraTypeRequestOpts = (requestParameters: GetCameraTypeRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCameraType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/api/camera-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getCameraTypeFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraTypeDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CameraTypeDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getCameraTypeRaw = async (requestParameters: GetCameraTypeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraTypeDTO>> => {
        const context = this.getCameraTypeRequestOpts(requestParameters);
        return this.getCameraTypeFetch(context, initOverrides);
    }

    /**
     */
    getCameraType = async (id: number, initOverrides?: RequestInit): Promise<CameraTypeDTO> => {
        const response = await this.getCameraTypeRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetCameraType = (() => {
        const key = (id: number) => this.getCameraTypeRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getCameraTypeFetch(context));
        const fn = (id: number, config?: SWRConfiguration<CameraTypeDTO>): SWRResponse<CameraTypeDTO> => {
            return useSWR<CameraTypeDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateCameraTypeRequestOpts = (requestParameters: PartialUpdateCameraTypeRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateCameraType.');
        }

        if (requestParameters.cameraTypeDTO === null || requestParameters.cameraTypeDTO === undefined) {
            throw new runtime.RequiredError('cameraTypeDTO','Required parameter requestParameters.cameraTypeDTO was null or undefined when calling partialUpdateCameraType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/api/camera-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CameraTypeDTOToJSON(requestParameters.cameraTypeDTO),
        };
    }

    /**
     */
    protected partialUpdateCameraTypeFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraTypeDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CameraTypeDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateCameraTypeRaw = async (requestParameters: PartialUpdateCameraTypeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraTypeDTO>> => {
        const context = this.partialUpdateCameraTypeRequestOpts(requestParameters);
        return this.partialUpdateCameraTypeFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateCameraType = async (id: number, cameraTypeDTO: CameraTypeDTO, initOverrides?: RequestInit): Promise<CameraTypeDTO> => {
        const response = await this.partialUpdateCameraTypeRaw({ id: id, cameraTypeDTO: cameraTypeDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateCameraTypeRequestOpts = (requestParameters: UpdateCameraTypeRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCameraType.');
        }

        if (requestParameters.cameraTypeDTO === null || requestParameters.cameraTypeDTO === undefined) {
            throw new runtime.RequiredError('cameraTypeDTO','Required parameter requestParameters.cameraTypeDTO was null or undefined when calling updateCameraType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/api/camera-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CameraTypeDTOToJSON(requestParameters.cameraTypeDTO),
        };
    }

    /**
     */
    protected updateCameraTypeFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraTypeDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CameraTypeDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateCameraTypeRaw = async (requestParameters: UpdateCameraTypeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraTypeDTO>> => {
        const context = this.updateCameraTypeRequestOpts(requestParameters);
        return this.updateCameraTypeFetch(context, initOverrides);
    }

    /**
     */
    updateCameraType = async (id: number, cameraTypeDTO: CameraTypeDTO, initOverrides?: RequestInit): Promise<CameraTypeDTO> => {
        const response = await this.updateCameraTypeRaw({ id: id, cameraTypeDTO: cameraTypeDTO }, initOverrides);
        return await response.value();
    }



}
