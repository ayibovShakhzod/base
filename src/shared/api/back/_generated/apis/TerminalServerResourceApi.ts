/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    TerminalServerDTO,
    TerminalServerDTOFromJSON,
    TerminalServerDTOToJSON,
} from '../models';

export interface CreateTerminalServerRequest {
    terminalServerDTO: TerminalServerDTO;
}

export interface DeleteTerminalServerRequest {
    id: number;
}

export interface GetAllTerminalServersRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetTerminalServerRequest {
    id: number;
}

export interface PartialUpdateTerminalServerRequest {
    id: number;
    terminalServerDTO: TerminalServerDTO;
}

export interface UpdateTerminalServerRequest {
    id: number;
    terminalServerDTO: TerminalServerDTO;
}

/**
 * 
 */
export class TerminalServerResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createTerminalServerRequestOpts = (requestParameters: CreateTerminalServerRequest): runtime.RequestOpts => {
        if (requestParameters.terminalServerDTO === null || requestParameters.terminalServerDTO === undefined) {
            throw new runtime.RequiredError('terminalServerDTO','Required parameter requestParameters.terminalServerDTO was null or undefined when calling createTerminalServer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/api/terminal-servers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TerminalServerDTOToJSON(requestParameters.terminalServerDTO),
        };
    }

    /**
     */
    protected createTerminalServerFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TerminalServerDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TerminalServerDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createTerminalServerRaw = async (requestParameters: CreateTerminalServerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TerminalServerDTO>> => {
        const context = this.createTerminalServerRequestOpts(requestParameters);
        return this.createTerminalServerFetch(context, initOverrides);
    }

    /**
     */
    createTerminalServer = async (terminalServerDTO: TerminalServerDTO, initOverrides?: RequestInit): Promise<TerminalServerDTO> => {
        const response = await this.createTerminalServerRaw({ terminalServerDTO: terminalServerDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteTerminalServerRequestOpts = (requestParameters: DeleteTerminalServerRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTerminalServer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/api/terminal-servers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteTerminalServerFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteTerminalServerRaw = async (requestParameters: DeleteTerminalServerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteTerminalServerRequestOpts(requestParameters);
        return this.deleteTerminalServerFetch(context, initOverrides);
    }

    /**
     */
    deleteTerminalServer = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteTerminalServerRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAllTerminalServersRequestOpts = (requestParameters: GetAllTerminalServersRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/api/terminal-servers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllTerminalServersFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TerminalServerDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TerminalServerDTOFromJSON));
    }

    /**
     */
    protected getAllTerminalServersRaw = async (requestParameters: GetAllTerminalServersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TerminalServerDTO>>> => {
        const context = this.getAllTerminalServersRequestOpts(requestParameters);
        return this.getAllTerminalServersFetch(context, initOverrides);
    }

    /**
     */
    getAllTerminalServers = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<TerminalServerDTO>> => {
        const response = await this.getAllTerminalServersRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllTerminalServers = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllTerminalServersRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllTerminalServersFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<TerminalServerDTO>>): SWRResponse<Array<TerminalServerDTO>> => {
            return useSWR<Array<TerminalServerDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getTerminalServerRequestOpts = (requestParameters: GetTerminalServerRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTerminalServer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/api/terminal-servers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getTerminalServerFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TerminalServerDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TerminalServerDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getTerminalServerRaw = async (requestParameters: GetTerminalServerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TerminalServerDTO>> => {
        const context = this.getTerminalServerRequestOpts(requestParameters);
        return this.getTerminalServerFetch(context, initOverrides);
    }

    /**
     */
    getTerminalServer = async (id: number, initOverrides?: RequestInit): Promise<TerminalServerDTO> => {
        const response = await this.getTerminalServerRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetTerminalServer = (() => {
        const key = (id: number) => this.getTerminalServerRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getTerminalServerFetch(context));
        const fn = (id: number, config?: SWRConfiguration<TerminalServerDTO>): SWRResponse<TerminalServerDTO> => {
            return useSWR<TerminalServerDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateTerminalServerRequestOpts = (requestParameters: PartialUpdateTerminalServerRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateTerminalServer.');
        }

        if (requestParameters.terminalServerDTO === null || requestParameters.terminalServerDTO === undefined) {
            throw new runtime.RequiredError('terminalServerDTO','Required parameter requestParameters.terminalServerDTO was null or undefined when calling partialUpdateTerminalServer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/api/terminal-servers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TerminalServerDTOToJSON(requestParameters.terminalServerDTO),
        };
    }

    /**
     */
    protected partialUpdateTerminalServerFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TerminalServerDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TerminalServerDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateTerminalServerRaw = async (requestParameters: PartialUpdateTerminalServerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TerminalServerDTO>> => {
        const context = this.partialUpdateTerminalServerRequestOpts(requestParameters);
        return this.partialUpdateTerminalServerFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateTerminalServer = async (id: number, terminalServerDTO: TerminalServerDTO, initOverrides?: RequestInit): Promise<TerminalServerDTO> => {
        const response = await this.partialUpdateTerminalServerRaw({ id: id, terminalServerDTO: terminalServerDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateTerminalServerRequestOpts = (requestParameters: UpdateTerminalServerRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTerminalServer.');
        }

        if (requestParameters.terminalServerDTO === null || requestParameters.terminalServerDTO === undefined) {
            throw new runtime.RequiredError('terminalServerDTO','Required parameter requestParameters.terminalServerDTO was null or undefined when calling updateTerminalServer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/api/terminal-servers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TerminalServerDTOToJSON(requestParameters.terminalServerDTO),
        };
    }

    /**
     */
    protected updateTerminalServerFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TerminalServerDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TerminalServerDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateTerminalServerRaw = async (requestParameters: UpdateTerminalServerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TerminalServerDTO>> => {
        const context = this.updateTerminalServerRequestOpts(requestParameters);
        return this.updateTerminalServerFetch(context, initOverrides);
    }

    /**
     */
    updateTerminalServer = async (id: number, terminalServerDTO: TerminalServerDTO, initOverrides?: RequestInit): Promise<TerminalServerDTO> => {
        const response = await this.updateTerminalServerRaw({ id: id, terminalServerDTO: terminalServerDTO }, initOverrides);
        return await response.value();
    }



}
