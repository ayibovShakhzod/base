/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    DistrictDTO,
    DistrictDTOFromJSON,
    DistrictDTOToJSON,
} from '../models';

export interface CreateDistrictRequest {
    districtDTO: DistrictDTO;
}

export interface DeleteDistrictRequest {
    id: number;
}

export interface GetAllDistrictsRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetDistrictRequest {
    id: number;
}

export interface PartialUpdateDistrictRequest {
    id: number;
    districtDTO: DistrictDTO;
}

export interface UpdateDistrictRequest {
    id: number;
    districtDTO: DistrictDTO;
}

/**
 * 
 */
export class DistrictResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createDistrictRequestOpts = (requestParameters: CreateDistrictRequest): runtime.RequestOpts => {
        if (requestParameters.districtDTO === null || requestParameters.districtDTO === undefined) {
            throw new runtime.RequiredError('districtDTO','Required parameter requestParameters.districtDTO was null or undefined when calling createDistrict.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/api/districts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DistrictDTOToJSON(requestParameters.districtDTO),
        };
    }

    /**
     */
    protected createDistrictFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DistrictDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DistrictDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createDistrictRaw = async (requestParameters: CreateDistrictRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DistrictDTO>> => {
        const context = this.createDistrictRequestOpts(requestParameters);
        return this.createDistrictFetch(context, initOverrides);
    }

    /**
     */
    createDistrict = async (districtDTO: DistrictDTO, initOverrides?: RequestInit): Promise<DistrictDTO> => {
        const response = await this.createDistrictRaw({ districtDTO: districtDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteDistrictRequestOpts = (requestParameters: DeleteDistrictRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDistrict.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/api/districts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteDistrictFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteDistrictRaw = async (requestParameters: DeleteDistrictRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteDistrictRequestOpts(requestParameters);
        return this.deleteDistrictFetch(context, initOverrides);
    }

    /**
     */
    deleteDistrict = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteDistrictRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAllDistrictsRequestOpts = (requestParameters: GetAllDistrictsRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/api/districts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllDistrictsFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<DistrictDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DistrictDTOFromJSON));
    }

    /**
     */
    protected getAllDistrictsRaw = async (requestParameters: GetAllDistrictsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<DistrictDTO>>> => {
        const context = this.getAllDistrictsRequestOpts(requestParameters);
        return this.getAllDistrictsFetch(context, initOverrides);
    }

    /**
     */
    getAllDistricts = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<DistrictDTO>> => {
        const response = await this.getAllDistrictsRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllDistricts = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllDistrictsRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllDistrictsFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<DistrictDTO>>): SWRResponse<Array<DistrictDTO>> => {
            return useSWR<Array<DistrictDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getDistrictRequestOpts = (requestParameters: GetDistrictRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDistrict.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/api/districts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getDistrictFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DistrictDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DistrictDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getDistrictRaw = async (requestParameters: GetDistrictRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DistrictDTO>> => {
        const context = this.getDistrictRequestOpts(requestParameters);
        return this.getDistrictFetch(context, initOverrides);
    }

    /**
     */
    getDistrict = async (id: number, initOverrides?: RequestInit): Promise<DistrictDTO> => {
        const response = await this.getDistrictRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetDistrict = (() => {
        const key = (id: number) => this.getDistrictRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getDistrictFetch(context));
        const fn = (id: number, config?: SWRConfiguration<DistrictDTO>): SWRResponse<DistrictDTO> => {
            return useSWR<DistrictDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateDistrictRequestOpts = (requestParameters: PartialUpdateDistrictRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateDistrict.');
        }

        if (requestParameters.districtDTO === null || requestParameters.districtDTO === undefined) {
            throw new runtime.RequiredError('districtDTO','Required parameter requestParameters.districtDTO was null or undefined when calling partialUpdateDistrict.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/api/districts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DistrictDTOToJSON(requestParameters.districtDTO),
        };
    }

    /**
     */
    protected partialUpdateDistrictFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DistrictDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DistrictDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateDistrictRaw = async (requestParameters: PartialUpdateDistrictRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DistrictDTO>> => {
        const context = this.partialUpdateDistrictRequestOpts(requestParameters);
        return this.partialUpdateDistrictFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateDistrict = async (id: number, districtDTO: DistrictDTO, initOverrides?: RequestInit): Promise<DistrictDTO> => {
        const response = await this.partialUpdateDistrictRaw({ id: id, districtDTO: districtDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateDistrictRequestOpts = (requestParameters: UpdateDistrictRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDistrict.');
        }

        if (requestParameters.districtDTO === null || requestParameters.districtDTO === undefined) {
            throw new runtime.RequiredError('districtDTO','Required parameter requestParameters.districtDTO was null or undefined when calling updateDistrict.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/api/districts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DistrictDTOToJSON(requestParameters.districtDTO),
        };
    }

    /**
     */
    protected updateDistrictFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DistrictDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DistrictDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateDistrictRaw = async (requestParameters: UpdateDistrictRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DistrictDTO>> => {
        const context = this.updateDistrictRequestOpts(requestParameters);
        return this.updateDistrictFetch(context, initOverrides);
    }

    /**
     */
    updateDistrict = async (id: number, districtDTO: DistrictDTO, initOverrides?: RequestInit): Promise<DistrictDTO> => {
        const response = await this.updateDistrictRaw({ id: id, districtDTO: districtDTO }, initOverrides);
        return await response.value();
    }



}
