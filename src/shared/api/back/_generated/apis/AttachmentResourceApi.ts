/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    AttachmentDTO,
    AttachmentDTOFromJSON,
    AttachmentDTOToJSON,
} from '../models';

export interface CreateAttachmentRequest {
    attachmentDTO: AttachmentDTO;
}

export interface DeleteAttachmentRequest {
    id: number;
}

export interface GetAllAttachmentsRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetAttachmentRequest {
    id: number;
}

export interface PartialUpdateAttachmentRequest {
    id: number;
    attachmentDTO: AttachmentDTO;
}

export interface UpdateAttachmentRequest {
    id: number;
    attachmentDTO: AttachmentDTO;
}

/**
 * 
 */
export class AttachmentResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createAttachmentRequestOpts = (requestParameters: CreateAttachmentRequest): runtime.RequestOpts => {
        if (requestParameters.attachmentDTO === null || requestParameters.attachmentDTO === undefined) {
            throw new runtime.RequiredError('attachmentDTO','Required parameter requestParameters.attachmentDTO was null or undefined when calling createAttachment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/api/attachments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AttachmentDTOToJSON(requestParameters.attachmentDTO),
        };
    }

    /**
     */
    protected createAttachmentFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AttachmentDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttachmentDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createAttachmentRaw = async (requestParameters: CreateAttachmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AttachmentDTO>> => {
        const context = this.createAttachmentRequestOpts(requestParameters);
        return this.createAttachmentFetch(context, initOverrides);
    }

    /**
     */
    createAttachment = async (attachmentDTO: AttachmentDTO, initOverrides?: RequestInit): Promise<AttachmentDTO> => {
        const response = await this.createAttachmentRaw({ attachmentDTO: attachmentDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteAttachmentRequestOpts = (requestParameters: DeleteAttachmentRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAttachment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/api/attachments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteAttachmentFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteAttachmentRaw = async (requestParameters: DeleteAttachmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteAttachmentRequestOpts(requestParameters);
        return this.deleteAttachmentFetch(context, initOverrides);
    }

    /**
     */
    deleteAttachment = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteAttachmentRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAllAttachmentsRequestOpts = (requestParameters: GetAllAttachmentsRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/api/attachments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllAttachmentsFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AttachmentDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AttachmentDTOFromJSON));
    }

    /**
     */
    protected getAllAttachmentsRaw = async (requestParameters: GetAllAttachmentsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AttachmentDTO>>> => {
        const context = this.getAllAttachmentsRequestOpts(requestParameters);
        return this.getAllAttachmentsFetch(context, initOverrides);
    }

    /**
     */
    getAllAttachments = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<AttachmentDTO>> => {
        const response = await this.getAllAttachmentsRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllAttachments = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllAttachmentsRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllAttachmentsFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<AttachmentDTO>>): SWRResponse<Array<AttachmentDTO>> => {
            return useSWR<Array<AttachmentDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getAttachmentRequestOpts = (requestParameters: GetAttachmentRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAttachment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/api/attachments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAttachmentFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AttachmentDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttachmentDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getAttachmentRaw = async (requestParameters: GetAttachmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AttachmentDTO>> => {
        const context = this.getAttachmentRequestOpts(requestParameters);
        return this.getAttachmentFetch(context, initOverrides);
    }

    /**
     */
    getAttachment = async (id: number, initOverrides?: RequestInit): Promise<AttachmentDTO> => {
        const response = await this.getAttachmentRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAttachment = (() => {
        const key = (id: number) => this.getAttachmentRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAttachmentFetch(context));
        const fn = (id: number, config?: SWRConfiguration<AttachmentDTO>): SWRResponse<AttachmentDTO> => {
            return useSWR<AttachmentDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateAttachmentRequestOpts = (requestParameters: PartialUpdateAttachmentRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateAttachment.');
        }

        if (requestParameters.attachmentDTO === null || requestParameters.attachmentDTO === undefined) {
            throw new runtime.RequiredError('attachmentDTO','Required parameter requestParameters.attachmentDTO was null or undefined when calling partialUpdateAttachment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/api/attachments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AttachmentDTOToJSON(requestParameters.attachmentDTO),
        };
    }

    /**
     */
    protected partialUpdateAttachmentFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AttachmentDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttachmentDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateAttachmentRaw = async (requestParameters: PartialUpdateAttachmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AttachmentDTO>> => {
        const context = this.partialUpdateAttachmentRequestOpts(requestParameters);
        return this.partialUpdateAttachmentFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateAttachment = async (id: number, attachmentDTO: AttachmentDTO, initOverrides?: RequestInit): Promise<AttachmentDTO> => {
        const response = await this.partialUpdateAttachmentRaw({ id: id, attachmentDTO: attachmentDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateAttachmentRequestOpts = (requestParameters: UpdateAttachmentRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAttachment.');
        }

        if (requestParameters.attachmentDTO === null || requestParameters.attachmentDTO === undefined) {
            throw new runtime.RequiredError('attachmentDTO','Required parameter requestParameters.attachmentDTO was null or undefined when calling updateAttachment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/api/attachments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AttachmentDTOToJSON(requestParameters.attachmentDTO),
        };
    }

    /**
     */
    protected updateAttachmentFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AttachmentDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttachmentDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateAttachmentRaw = async (requestParameters: UpdateAttachmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AttachmentDTO>> => {
        const context = this.updateAttachmentRequestOpts(requestParameters);
        return this.updateAttachmentFetch(context, initOverrides);
    }

    /**
     */
    updateAttachment = async (id: number, attachmentDTO: AttachmentDTO, initOverrides?: RequestInit): Promise<AttachmentDTO> => {
        const response = await this.updateAttachmentRaw({ id: id, attachmentDTO: attachmentDTO }, initOverrides);
        return await response.value();
    }



}
