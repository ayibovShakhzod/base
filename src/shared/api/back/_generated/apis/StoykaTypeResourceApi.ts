/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    StoykaTypeDTO,
    StoykaTypeDTOFromJSON,
    StoykaTypeDTOToJSON,
} from '../models';

export interface CreateStoykaTypeRequest {
    stoykaTypeDTO: StoykaTypeDTO;
}

export interface DeleteStoykaTypeRequest {
    id: number;
}

export interface GetAllByObyekt4Request {
    obyektId: number;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetAllStoykaTypesRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetStoykaTypeRequest {
    id: number;
}

export interface PartialUpdateStoykaTypeRequest {
    id: number;
    stoykaTypeDTO: StoykaTypeDTO;
}

export interface UpdateStoykaTypeRequest {
    id: number;
    stoykaTypeDTO: StoykaTypeDTO;
}

/**
 * 
 */
export class StoykaTypeResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createStoykaTypeRequestOpts = (requestParameters: CreateStoykaTypeRequest): runtime.RequestOpts => {
        if (requestParameters.stoykaTypeDTO === null || requestParameters.stoykaTypeDTO === undefined) {
            throw new runtime.RequiredError('stoykaTypeDTO','Required parameter requestParameters.stoykaTypeDTO was null or undefined when calling createStoykaType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/stoyka-types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoykaTypeDTOToJSON(requestParameters.stoykaTypeDTO),
        };
    }

    /**
     */
    protected createStoykaTypeFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StoykaTypeDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoykaTypeDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createStoykaTypeRaw = async (requestParameters: CreateStoykaTypeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StoykaTypeDTO>> => {
        const context = this.createStoykaTypeRequestOpts(requestParameters);
        return this.createStoykaTypeFetch(context, initOverrides);
    }

    /**
     */
    createStoykaType = async (stoykaTypeDTO: StoykaTypeDTO, initOverrides?: RequestInit): Promise<StoykaTypeDTO> => {
        const response = await this.createStoykaTypeRaw({ stoykaTypeDTO: stoykaTypeDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteStoykaTypeRequestOpts = (requestParameters: DeleteStoykaTypeRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStoykaType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/stoyka-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteStoykaTypeFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteStoykaTypeRaw = async (requestParameters: DeleteStoykaTypeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteStoykaTypeRequestOpts(requestParameters);
        return this.deleteStoykaTypeFetch(context, initOverrides);
    }

    /**
     */
    deleteStoykaType = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteStoykaTypeRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAllByObyekt4RequestOpts = (requestParameters: GetAllByObyekt4Request): runtime.RequestOpts => {
        if (requestParameters.obyektId === null || requestParameters.obyektId === undefined) {
            throw new runtime.RequiredError('obyektId','Required parameter requestParameters.obyektId was null or undefined when calling getAllByObyekt4.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/stoyka-types/obyekt/{obyektId}`.replace(`{${"obyektId"}}`, encodeURIComponent(String(requestParameters.obyektId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllByObyekt4Fetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StoykaTypeDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StoykaTypeDTOFromJSON));
    }

    /**
     */
    protected getAllByObyekt4Raw = async (requestParameters: GetAllByObyekt4Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StoykaTypeDTO>>> => {
        const context = this.getAllByObyekt4RequestOpts(requestParameters);
        return this.getAllByObyekt4Fetch(context, initOverrides);
    }

    /**
     */
    getAllByObyekt4 = async (obyektId: number, page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<StoykaTypeDTO>> => {
        const response = await this.getAllByObyekt4Raw({ obyektId: obyektId, page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllByObyekt4 = (() => {
        const key = (requestParameters: GetAllByObyekt4Request, config?: SWRConfiguration<Array<StoykaTypeDTO>>) => this.getAllByObyekt4RequestOpts(requestParameters);
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllByObyekt4Fetch(context));
        const fn = (requestParameters: GetAllByObyekt4Request, config?: SWRConfiguration<Array<StoykaTypeDTO>>): SWRResponse<Array<StoykaTypeDTO>> => {
            return useSWR<Array<StoykaTypeDTO>>(() => key(requestParameters), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getAllStoykaTypesRequestOpts = (requestParameters: GetAllStoykaTypesRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/stoyka-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllStoykaTypesFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StoykaTypeDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StoykaTypeDTOFromJSON));
    }

    /**
     */
    protected getAllStoykaTypesRaw = async (requestParameters: GetAllStoykaTypesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StoykaTypeDTO>>> => {
        const context = this.getAllStoykaTypesRequestOpts(requestParameters);
        return this.getAllStoykaTypesFetch(context, initOverrides);
    }

    /**
     */
    getAllStoykaTypes = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<StoykaTypeDTO>> => {
        const response = await this.getAllStoykaTypesRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllStoykaTypes = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllStoykaTypesRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllStoykaTypesFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<StoykaTypeDTO>>): SWRResponse<Array<StoykaTypeDTO>> => {
            return useSWR<Array<StoykaTypeDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getStoykaTypeRequestOpts = (requestParameters: GetStoykaTypeRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStoykaType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/stoyka-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getStoykaTypeFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StoykaTypeDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoykaTypeDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getStoykaTypeRaw = async (requestParameters: GetStoykaTypeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StoykaTypeDTO>> => {
        const context = this.getStoykaTypeRequestOpts(requestParameters);
        return this.getStoykaTypeFetch(context, initOverrides);
    }

    /**
     */
    getStoykaType = async (id: number, initOverrides?: RequestInit): Promise<StoykaTypeDTO> => {
        const response = await this.getStoykaTypeRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetStoykaType = (() => {
        const key = (id: number) => this.getStoykaTypeRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getStoykaTypeFetch(context));
        const fn = (id: number, config?: SWRConfiguration<StoykaTypeDTO>): SWRResponse<StoykaTypeDTO> => {
            return useSWR<StoykaTypeDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateStoykaTypeRequestOpts = (requestParameters: PartialUpdateStoykaTypeRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateStoykaType.');
        }

        if (requestParameters.stoykaTypeDTO === null || requestParameters.stoykaTypeDTO === undefined) {
            throw new runtime.RequiredError('stoykaTypeDTO','Required parameter requestParameters.stoykaTypeDTO was null or undefined when calling partialUpdateStoykaType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/stoyka-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: StoykaTypeDTOToJSON(requestParameters.stoykaTypeDTO),
        };
    }

    /**
     */
    protected partialUpdateStoykaTypeFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StoykaTypeDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoykaTypeDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateStoykaTypeRaw = async (requestParameters: PartialUpdateStoykaTypeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StoykaTypeDTO>> => {
        const context = this.partialUpdateStoykaTypeRequestOpts(requestParameters);
        return this.partialUpdateStoykaTypeFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateStoykaType = async (id: number, stoykaTypeDTO: StoykaTypeDTO, initOverrides?: RequestInit): Promise<StoykaTypeDTO> => {
        const response = await this.partialUpdateStoykaTypeRaw({ id: id, stoykaTypeDTO: stoykaTypeDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateStoykaTypeRequestOpts = (requestParameters: UpdateStoykaTypeRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateStoykaType.');
        }

        if (requestParameters.stoykaTypeDTO === null || requestParameters.stoykaTypeDTO === undefined) {
            throw new runtime.RequiredError('stoykaTypeDTO','Required parameter requestParameters.stoykaTypeDTO was null or undefined when calling updateStoykaType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/stoyka-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StoykaTypeDTOToJSON(requestParameters.stoykaTypeDTO),
        };
    }

    /**
     */
    protected updateStoykaTypeFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StoykaTypeDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoykaTypeDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateStoykaTypeRaw = async (requestParameters: UpdateStoykaTypeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StoykaTypeDTO>> => {
        const context = this.updateStoykaTypeRequestOpts(requestParameters);
        return this.updateStoykaTypeFetch(context, initOverrides);
    }

    /**
     */
    updateStoykaType = async (id: number, stoykaTypeDTO: StoykaTypeDTO, initOverrides?: RequestInit): Promise<StoykaTypeDTO> => {
        const response = await this.updateStoykaTypeRaw({ id: id, stoykaTypeDTO: stoykaTypeDTO }, initOverrides);
        return await response.value();
    }



}
