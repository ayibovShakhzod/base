/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    ProjectorTypeDTO,
    ProjectorTypeDTOFromJSON,
    ProjectorTypeDTOToJSON,
} from '../models';

export interface CreateProjectorTypeRequest {
    projectorTypeDTO: ProjectorTypeDTO;
}

export interface DeleteProjectorTypeRequest {
    id: number;
}

export interface GetAllByObyekt7Request {
    obyektId: number;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetAllProjectorTypesRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetProjectorTypeRequest {
    id: number;
}

export interface PartialUpdateProjectorTypeRequest {
    id: number;
    projectorTypeDTO: ProjectorTypeDTO;
}

export interface UpdateProjectorTypeRequest {
    id: number;
    projectorTypeDTO: ProjectorTypeDTO;
}

/**
 * 
 */
export class ProjectorTypeResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createProjectorTypeRequestOpts = (requestParameters: CreateProjectorTypeRequest): runtime.RequestOpts => {
        if (requestParameters.projectorTypeDTO === null || requestParameters.projectorTypeDTO === undefined) {
            throw new runtime.RequiredError('projectorTypeDTO','Required parameter requestParameters.projectorTypeDTO was null or undefined when calling createProjectorType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/projector-types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectorTypeDTOToJSON(requestParameters.projectorTypeDTO),
        };
    }

    /**
     */
    protected createProjectorTypeFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectorTypeDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectorTypeDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createProjectorTypeRaw = async (requestParameters: CreateProjectorTypeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectorTypeDTO>> => {
        const context = this.createProjectorTypeRequestOpts(requestParameters);
        return this.createProjectorTypeFetch(context, initOverrides);
    }

    /**
     */
    createProjectorType = async (projectorTypeDTO: ProjectorTypeDTO, initOverrides?: RequestInit): Promise<ProjectorTypeDTO> => {
        const response = await this.createProjectorTypeRaw({ projectorTypeDTO: projectorTypeDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteProjectorTypeRequestOpts = (requestParameters: DeleteProjectorTypeRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProjectorType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/projector-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteProjectorTypeFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteProjectorTypeRaw = async (requestParameters: DeleteProjectorTypeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteProjectorTypeRequestOpts(requestParameters);
        return this.deleteProjectorTypeFetch(context, initOverrides);
    }

    /**
     */
    deleteProjectorType = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteProjectorTypeRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAllByObyekt7RequestOpts = (requestParameters: GetAllByObyekt7Request): runtime.RequestOpts => {
        if (requestParameters.obyektId === null || requestParameters.obyektId === undefined) {
            throw new runtime.RequiredError('obyektId','Required parameter requestParameters.obyektId was null or undefined when calling getAllByObyekt7.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/projector-types/obyekt/{obyektId}`.replace(`{${"obyektId"}}`, encodeURIComponent(String(requestParameters.obyektId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllByObyekt7Fetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProjectorTypeDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectorTypeDTOFromJSON));
    }

    /**
     */
    protected getAllByObyekt7Raw = async (requestParameters: GetAllByObyekt7Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProjectorTypeDTO>>> => {
        const context = this.getAllByObyekt7RequestOpts(requestParameters);
        return this.getAllByObyekt7Fetch(context, initOverrides);
    }

    /**
     */
    getAllByObyekt7 = async (obyektId: number, page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<ProjectorTypeDTO>> => {
        const response = await this.getAllByObyekt7Raw({ obyektId: obyektId, page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllByObyekt7 = (() => {
        const key = (requestParameters: GetAllByObyekt7Request, config?: SWRConfiguration<Array<ProjectorTypeDTO>>) => this.getAllByObyekt7RequestOpts(requestParameters);
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllByObyekt7Fetch(context));
        const fn = (requestParameters: GetAllByObyekt7Request, config?: SWRConfiguration<Array<ProjectorTypeDTO>>): SWRResponse<Array<ProjectorTypeDTO>> => {
            return useSWR<Array<ProjectorTypeDTO>>(() => key(requestParameters), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getAllProjectorTypesRequestOpts = (requestParameters: GetAllProjectorTypesRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/projector-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllProjectorTypesFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProjectorTypeDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectorTypeDTOFromJSON));
    }

    /**
     */
    protected getAllProjectorTypesRaw = async (requestParameters: GetAllProjectorTypesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProjectorTypeDTO>>> => {
        const context = this.getAllProjectorTypesRequestOpts(requestParameters);
        return this.getAllProjectorTypesFetch(context, initOverrides);
    }

    /**
     */
    getAllProjectorTypes = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<ProjectorTypeDTO>> => {
        const response = await this.getAllProjectorTypesRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllProjectorTypes = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllProjectorTypesRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllProjectorTypesFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<ProjectorTypeDTO>>): SWRResponse<Array<ProjectorTypeDTO>> => {
            return useSWR<Array<ProjectorTypeDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getProjectorTypeRequestOpts = (requestParameters: GetProjectorTypeRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProjectorType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/projector-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getProjectorTypeFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectorTypeDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectorTypeDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getProjectorTypeRaw = async (requestParameters: GetProjectorTypeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectorTypeDTO>> => {
        const context = this.getProjectorTypeRequestOpts(requestParameters);
        return this.getProjectorTypeFetch(context, initOverrides);
    }

    /**
     */
    getProjectorType = async (id: number, initOverrides?: RequestInit): Promise<ProjectorTypeDTO> => {
        const response = await this.getProjectorTypeRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetProjectorType = (() => {
        const key = (id: number) => this.getProjectorTypeRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getProjectorTypeFetch(context));
        const fn = (id: number, config?: SWRConfiguration<ProjectorTypeDTO>): SWRResponse<ProjectorTypeDTO> => {
            return useSWR<ProjectorTypeDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateProjectorTypeRequestOpts = (requestParameters: PartialUpdateProjectorTypeRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateProjectorType.');
        }

        if (requestParameters.projectorTypeDTO === null || requestParameters.projectorTypeDTO === undefined) {
            throw new runtime.RequiredError('projectorTypeDTO','Required parameter requestParameters.projectorTypeDTO was null or undefined when calling partialUpdateProjectorType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/projector-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectorTypeDTOToJSON(requestParameters.projectorTypeDTO),
        };
    }

    /**
     */
    protected partialUpdateProjectorTypeFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectorTypeDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectorTypeDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateProjectorTypeRaw = async (requestParameters: PartialUpdateProjectorTypeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectorTypeDTO>> => {
        const context = this.partialUpdateProjectorTypeRequestOpts(requestParameters);
        return this.partialUpdateProjectorTypeFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateProjectorType = async (id: number, projectorTypeDTO: ProjectorTypeDTO, initOverrides?: RequestInit): Promise<ProjectorTypeDTO> => {
        const response = await this.partialUpdateProjectorTypeRaw({ id: id, projectorTypeDTO: projectorTypeDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateProjectorTypeRequestOpts = (requestParameters: UpdateProjectorTypeRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProjectorType.');
        }

        if (requestParameters.projectorTypeDTO === null || requestParameters.projectorTypeDTO === undefined) {
            throw new runtime.RequiredError('projectorTypeDTO','Required parameter requestParameters.projectorTypeDTO was null or undefined when calling updateProjectorType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/projector-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectorTypeDTOToJSON(requestParameters.projectorTypeDTO),
        };
    }

    /**
     */
    protected updateProjectorTypeFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectorTypeDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectorTypeDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateProjectorTypeRaw = async (requestParameters: UpdateProjectorTypeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectorTypeDTO>> => {
        const context = this.updateProjectorTypeRequestOpts(requestParameters);
        return this.updateProjectorTypeFetch(context, initOverrides);
    }

    /**
     */
    updateProjectorType = async (id: number, projectorTypeDTO: ProjectorTypeDTO, initOverrides?: RequestInit): Promise<ProjectorTypeDTO> => {
        const response = await this.updateProjectorTypeRaw({ id: id, projectorTypeDTO: projectorTypeDTO }, initOverrides);
        return await response.value();
    }



}
