/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    RozetkaDTO,
    RozetkaDTOFromJSON,
    RozetkaDTOToJSON,
} from '../models';

export interface CreateRozetkaRequest {
    rozetkaDTO: RozetkaDTO;
}

export interface DeleteRozetkaRequest {
    id: number;
}

export interface GetAllRozetkasRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetAllRozetkas1Request {
    obyektId: number;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetRozetkaRequest {
    id: number;
}

export interface PartialUpdateRozetkaRequest {
    id: number;
    rozetkaDTO: RozetkaDTO;
}

export interface UpdateRozetkaRequest {
    id: number;
    rozetkaDTO: RozetkaDTO;
}

/**
 * 
 */
export class RozetkaResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createRozetkaRequestOpts = (requestParameters: CreateRozetkaRequest): runtime.RequestOpts => {
        if (requestParameters.rozetkaDTO === null || requestParameters.rozetkaDTO === undefined) {
            throw new runtime.RequiredError('rozetkaDTO','Required parameter requestParameters.rozetkaDTO was null or undefined when calling createRozetka.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/rozetkas`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RozetkaDTOToJSON(requestParameters.rozetkaDTO),
        };
    }

    /**
     */
    protected createRozetkaFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RozetkaDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RozetkaDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createRozetkaRaw = async (requestParameters: CreateRozetkaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RozetkaDTO>> => {
        const context = this.createRozetkaRequestOpts(requestParameters);
        return this.createRozetkaFetch(context, initOverrides);
    }

    /**
     */
    createRozetka = async (rozetkaDTO: RozetkaDTO, initOverrides?: RequestInit): Promise<RozetkaDTO> => {
        const response = await this.createRozetkaRaw({ rozetkaDTO: rozetkaDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteRozetkaRequestOpts = (requestParameters: DeleteRozetkaRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRozetka.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/rozetkas/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteRozetkaFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteRozetkaRaw = async (requestParameters: DeleteRozetkaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteRozetkaRequestOpts(requestParameters);
        return this.deleteRozetkaFetch(context, initOverrides);
    }

    /**
     */
    deleteRozetka = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteRozetkaRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAllRozetkasRequestOpts = (requestParameters: GetAllRozetkasRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/rozetkas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllRozetkasFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<RozetkaDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RozetkaDTOFromJSON));
    }

    /**
     */
    protected getAllRozetkasRaw = async (requestParameters: GetAllRozetkasRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<RozetkaDTO>>> => {
        const context = this.getAllRozetkasRequestOpts(requestParameters);
        return this.getAllRozetkasFetch(context, initOverrides);
    }

    /**
     */
    getAllRozetkas = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<RozetkaDTO>> => {
        const response = await this.getAllRozetkasRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllRozetkas = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllRozetkasRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllRozetkasFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<RozetkaDTO>>): SWRResponse<Array<RozetkaDTO>> => {
            return useSWR<Array<RozetkaDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getAllRozetkas1RequestOpts = (requestParameters: GetAllRozetkas1Request): runtime.RequestOpts => {
        if (requestParameters.obyektId === null || requestParameters.obyektId === undefined) {
            throw new runtime.RequiredError('obyektId','Required parameter requestParameters.obyektId was null or undefined when calling getAllRozetkas1.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/rozetkas/obyekt/{obyektId}`.replace(`{${"obyektId"}}`, encodeURIComponent(String(requestParameters.obyektId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllRozetkas1Fetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<RozetkaDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RozetkaDTOFromJSON));
    }

    /**
     */
    protected getAllRozetkas1Raw = async (requestParameters: GetAllRozetkas1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<RozetkaDTO>>> => {
        const context = this.getAllRozetkas1RequestOpts(requestParameters);
        return this.getAllRozetkas1Fetch(context, initOverrides);
    }

    /**
     */
    getAllRozetkas1 = async (obyektId: number, page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<RozetkaDTO>> => {
        const response = await this.getAllRozetkas1Raw({ obyektId: obyektId, page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllRozetkas1 = (() => {
        const key = (requestParameters: GetAllRozetkas1Request, config?: SWRConfiguration<Array<RozetkaDTO>>) => this.getAllRozetkas1RequestOpts(requestParameters);
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllRozetkas1Fetch(context));
        const fn = (requestParameters: GetAllRozetkas1Request, config?: SWRConfiguration<Array<RozetkaDTO>>): SWRResponse<Array<RozetkaDTO>> => {
            return useSWR<Array<RozetkaDTO>>(() => key(requestParameters), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getRozetkaRequestOpts = (requestParameters: GetRozetkaRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRozetka.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/rozetkas/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getRozetkaFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RozetkaDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RozetkaDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getRozetkaRaw = async (requestParameters: GetRozetkaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RozetkaDTO>> => {
        const context = this.getRozetkaRequestOpts(requestParameters);
        return this.getRozetkaFetch(context, initOverrides);
    }

    /**
     */
    getRozetka = async (id: number, initOverrides?: RequestInit): Promise<RozetkaDTO> => {
        const response = await this.getRozetkaRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetRozetka = (() => {
        const key = (id: number) => this.getRozetkaRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getRozetkaFetch(context));
        const fn = (id: number, config?: SWRConfiguration<RozetkaDTO>): SWRResponse<RozetkaDTO> => {
            return useSWR<RozetkaDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateRozetkaRequestOpts = (requestParameters: PartialUpdateRozetkaRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateRozetka.');
        }

        if (requestParameters.rozetkaDTO === null || requestParameters.rozetkaDTO === undefined) {
            throw new runtime.RequiredError('rozetkaDTO','Required parameter requestParameters.rozetkaDTO was null or undefined when calling partialUpdateRozetka.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/rozetkas/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RozetkaDTOToJSON(requestParameters.rozetkaDTO),
        };
    }

    /**
     */
    protected partialUpdateRozetkaFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RozetkaDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RozetkaDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateRozetkaRaw = async (requestParameters: PartialUpdateRozetkaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RozetkaDTO>> => {
        const context = this.partialUpdateRozetkaRequestOpts(requestParameters);
        return this.partialUpdateRozetkaFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateRozetka = async (id: number, rozetkaDTO: RozetkaDTO, initOverrides?: RequestInit): Promise<RozetkaDTO> => {
        const response = await this.partialUpdateRozetkaRaw({ id: id, rozetkaDTO: rozetkaDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateRozetkaRequestOpts = (requestParameters: UpdateRozetkaRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRozetka.');
        }

        if (requestParameters.rozetkaDTO === null || requestParameters.rozetkaDTO === undefined) {
            throw new runtime.RequiredError('rozetkaDTO','Required parameter requestParameters.rozetkaDTO was null or undefined when calling updateRozetka.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/rozetkas/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RozetkaDTOToJSON(requestParameters.rozetkaDTO),
        };
    }

    /**
     */
    protected updateRozetkaFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RozetkaDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RozetkaDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateRozetkaRaw = async (requestParameters: UpdateRozetkaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RozetkaDTO>> => {
        const context = this.updateRozetkaRequestOpts(requestParameters);
        return this.updateRozetkaFetch(context, initOverrides);
    }

    /**
     */
    updateRozetka = async (id: number, rozetkaDTO: RozetkaDTO, initOverrides?: RequestInit): Promise<RozetkaDTO> => {
        const response = await this.updateRozetkaRaw({ id: id, rozetkaDTO: rozetkaDTO }, initOverrides);
        return await response.value();
    }



}
