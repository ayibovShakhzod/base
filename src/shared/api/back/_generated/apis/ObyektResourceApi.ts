/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    ObyektDTO,
    ObyektDTOFromJSON,
    ObyektDTOToJSON,
} from '../models';

export interface CreateObyektRequest {
    obyektDTO: ObyektDTO;
}

export interface DeleteObyektRequest {
    id: number;
}

export interface GetAllByFilterRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
    regionId?: number;
    districtId?: number;
    objectTasnifiId?: number;
    objectTasnifiTuriId?: number;
    loyihaId?: number;
    buyurtmaRaqamId?: number;
}

export interface GetAllObyektsRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetObyektRequest {
    id: number;
}

export interface PartialUpdateObyektRequest {
    id: number;
    obyektDTO: ObyektDTO;
}

export interface UpdateObyektRequest {
    id: number;
    obyektDTO: ObyektDTO;
}

/**
 * 
 */
export class ObyektResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createObyektRequestOpts = (requestParameters: CreateObyektRequest): runtime.RequestOpts => {
        if (requestParameters.obyektDTO === null || requestParameters.obyektDTO === undefined) {
            throw new runtime.RequiredError('obyektDTO','Required parameter requestParameters.obyektDTO was null or undefined when calling createObyekt.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/obyekts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ObyektDTOToJSON(requestParameters.obyektDTO),
        };
    }

    /**
     */
    protected createObyektFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObyektDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObyektDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createObyektRaw = async (requestParameters: CreateObyektRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObyektDTO>> => {
        const context = this.createObyektRequestOpts(requestParameters);
        return this.createObyektFetch(context, initOverrides);
    }

    /**
     */
    createObyekt = async (obyektDTO: ObyektDTO, initOverrides?: RequestInit): Promise<ObyektDTO> => {
        const response = await this.createObyektRaw({ obyektDTO: obyektDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteObyektRequestOpts = (requestParameters: DeleteObyektRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteObyekt.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/obyekts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteObyektFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteObyektRaw = async (requestParameters: DeleteObyektRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteObyektRequestOpts(requestParameters);
        return this.deleteObyektFetch(context, initOverrides);
    }

    /**
     */
    deleteObyekt = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteObyektRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAllByFilterRequestOpts = (requestParameters: GetAllByFilterRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.regionId !== undefined) {
            queryParameters['regionId'] = requestParameters.regionId;
        }

        if (requestParameters.districtId !== undefined) {
            queryParameters['districtId'] = requestParameters.districtId;
        }

        if (requestParameters.objectTasnifiId !== undefined) {
            queryParameters['objectTasnifiId'] = requestParameters.objectTasnifiId;
        }

        if (requestParameters.objectTasnifiTuriId !== undefined) {
            queryParameters['objectTasnifiTuriId'] = requestParameters.objectTasnifiTuriId;
        }

        if (requestParameters.loyihaId !== undefined) {
            queryParameters['loyihaId'] = requestParameters.loyihaId;
        }

        if (requestParameters.buyurtmaRaqamId !== undefined) {
            queryParameters['buyurtmaRaqamId'] = requestParameters.buyurtmaRaqamId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/obyekts/filter`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllByFilterFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ObyektDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ObyektDTOFromJSON));
    }

    /**
     */
    protected getAllByFilterRaw = async (requestParameters: GetAllByFilterRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ObyektDTO>>> => {
        const context = this.getAllByFilterRequestOpts(requestParameters);
        return this.getAllByFilterFetch(context, initOverrides);
    }

    /**
     */
    getAllByFilter = async (page?: number, size?: number, sort?: Array<string>, regionId?: number, districtId?: number, objectTasnifiId?: number, objectTasnifiTuriId?: number, loyihaId?: number, buyurtmaRaqamId?: number, initOverrides?: RequestInit): Promise<Array<ObyektDTO>> => {
        const response = await this.getAllByFilterRaw({ page: page, size: size, sort: sort, regionId: regionId, districtId: districtId, objectTasnifiId: objectTasnifiId, objectTasnifiTuriId: objectTasnifiTuriId, loyihaId: loyihaId, buyurtmaRaqamId: buyurtmaRaqamId }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllByFilter = (() => {
        const key = (requestParameters: GetAllByFilterRequest = {}, config?: SWRConfiguration<Array<ObyektDTO>>) => this.getAllByFilterRequestOpts(requestParameters);
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllByFilterFetch(context));
        const fn = (requestParameters: GetAllByFilterRequest = {}, config?: SWRConfiguration<Array<ObyektDTO>>): SWRResponse<Array<ObyektDTO>> => {
            return useSWR<Array<ObyektDTO>>(() => key(requestParameters), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getAllObyektsRequestOpts = (requestParameters: GetAllObyektsRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/obyekts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllObyektsFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ObyektDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ObyektDTOFromJSON));
    }

    /**
     */
    protected getAllObyektsRaw = async (requestParameters: GetAllObyektsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ObyektDTO>>> => {
        const context = this.getAllObyektsRequestOpts(requestParameters);
        return this.getAllObyektsFetch(context, initOverrides);
    }

    /**
     */
    getAllObyekts = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<ObyektDTO>> => {
        const response = await this.getAllObyektsRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllObyekts = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllObyektsRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllObyektsFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<ObyektDTO>>): SWRResponse<Array<ObyektDTO>> => {
            return useSWR<Array<ObyektDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getObyektRequestOpts = (requestParameters: GetObyektRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getObyekt.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/obyekts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getObyektFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObyektDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObyektDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getObyektRaw = async (requestParameters: GetObyektRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObyektDTO>> => {
        const context = this.getObyektRequestOpts(requestParameters);
        return this.getObyektFetch(context, initOverrides);
    }

    /**
     */
    getObyekt = async (id: number, initOverrides?: RequestInit): Promise<ObyektDTO> => {
        const response = await this.getObyektRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetObyekt = (() => {
        const key = (id: number) => this.getObyektRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getObyektFetch(context));
        const fn = (id: number, config?: SWRConfiguration<ObyektDTO>): SWRResponse<ObyektDTO> => {
            return useSWR<ObyektDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateObyektRequestOpts = (requestParameters: PartialUpdateObyektRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateObyekt.');
        }

        if (requestParameters.obyektDTO === null || requestParameters.obyektDTO === undefined) {
            throw new runtime.RequiredError('obyektDTO','Required parameter requestParameters.obyektDTO was null or undefined when calling partialUpdateObyekt.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/obyekts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ObyektDTOToJSON(requestParameters.obyektDTO),
        };
    }

    /**
     */
    protected partialUpdateObyektFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObyektDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObyektDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateObyektRaw = async (requestParameters: PartialUpdateObyektRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObyektDTO>> => {
        const context = this.partialUpdateObyektRequestOpts(requestParameters);
        return this.partialUpdateObyektFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateObyekt = async (id: number, obyektDTO: ObyektDTO, initOverrides?: RequestInit): Promise<ObyektDTO> => {
        const response = await this.partialUpdateObyektRaw({ id: id, obyektDTO: obyektDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateObyektRequestOpts = (requestParameters: UpdateObyektRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateObyekt.');
        }

        if (requestParameters.obyektDTO === null || requestParameters.obyektDTO === undefined) {
            throw new runtime.RequiredError('obyektDTO','Required parameter requestParameters.obyektDTO was null or undefined when calling updateObyekt.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/obyekts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ObyektDTOToJSON(requestParameters.obyektDTO),
        };
    }

    /**
     */
    protected updateObyektFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObyektDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObyektDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateObyektRaw = async (requestParameters: UpdateObyektRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObyektDTO>> => {
        const context = this.updateObyektRequestOpts(requestParameters);
        return this.updateObyektFetch(context, initOverrides);
    }

    /**
     */
    updateObyekt = async (id: number, obyektDTO: ObyektDTO, initOverrides?: RequestInit): Promise<ObyektDTO> => {
        const response = await this.updateObyektRaw({ id: id, obyektDTO: obyektDTO }, initOverrides);
        return await response.value();
    }



}
