/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    SvitaforDetectorDTO,
    SvitaforDetectorDTOFromJSON,
    SvitaforDetectorDTOToJSON,
} from '../models';

export interface CreateSvitaforDetectorRequest {
    svitaforDetectorDTO: SvitaforDetectorDTO;
}

export interface DeleteSvitaforDetectorRequest {
    id: number;
}

export interface GetAllSvitaforDetectorsRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetSvitaforDetectorRequest {
    id: number;
}

export interface PartialUpdateSvitaforDetectorRequest {
    id: number;
    svitaforDetectorDTO: SvitaforDetectorDTO;
}

export interface UpdateSvitaforDetectorRequest {
    id: number;
    svitaforDetectorDTO: SvitaforDetectorDTO;
}

/**
 * 
 */
export class SvitaforDetectorResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createSvitaforDetectorRequestOpts = (requestParameters: CreateSvitaforDetectorRequest): runtime.RequestOpts => {
        if (requestParameters.svitaforDetectorDTO === null || requestParameters.svitaforDetectorDTO === undefined) {
            throw new runtime.RequiredError('svitaforDetectorDTO','Required parameter requestParameters.svitaforDetectorDTO was null or undefined when calling createSvitaforDetector.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/api/svitafor-detectors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SvitaforDetectorDTOToJSON(requestParameters.svitaforDetectorDTO),
        };
    }

    /**
     */
    protected createSvitaforDetectorFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SvitaforDetectorDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SvitaforDetectorDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createSvitaforDetectorRaw = async (requestParameters: CreateSvitaforDetectorRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SvitaforDetectorDTO>> => {
        const context = this.createSvitaforDetectorRequestOpts(requestParameters);
        return this.createSvitaforDetectorFetch(context, initOverrides);
    }

    /**
     */
    createSvitaforDetector = async (svitaforDetectorDTO: SvitaforDetectorDTO, initOverrides?: RequestInit): Promise<SvitaforDetectorDTO> => {
        const response = await this.createSvitaforDetectorRaw({ svitaforDetectorDTO: svitaforDetectorDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteSvitaforDetectorRequestOpts = (requestParameters: DeleteSvitaforDetectorRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSvitaforDetector.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/api/svitafor-detectors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteSvitaforDetectorFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteSvitaforDetectorRaw = async (requestParameters: DeleteSvitaforDetectorRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteSvitaforDetectorRequestOpts(requestParameters);
        return this.deleteSvitaforDetectorFetch(context, initOverrides);
    }

    /**
     */
    deleteSvitaforDetector = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteSvitaforDetectorRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAllSvitaforDetectorsRequestOpts = (requestParameters: GetAllSvitaforDetectorsRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/api/svitafor-detectors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllSvitaforDetectorsFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SvitaforDetectorDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SvitaforDetectorDTOFromJSON));
    }

    /**
     */
    protected getAllSvitaforDetectorsRaw = async (requestParameters: GetAllSvitaforDetectorsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SvitaforDetectorDTO>>> => {
        const context = this.getAllSvitaforDetectorsRequestOpts(requestParameters);
        return this.getAllSvitaforDetectorsFetch(context, initOverrides);
    }

    /**
     */
    getAllSvitaforDetectors = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<SvitaforDetectorDTO>> => {
        const response = await this.getAllSvitaforDetectorsRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllSvitaforDetectors = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllSvitaforDetectorsRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllSvitaforDetectorsFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<SvitaforDetectorDTO>>): SWRResponse<Array<SvitaforDetectorDTO>> => {
            return useSWR<Array<SvitaforDetectorDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getSvitaforDetectorRequestOpts = (requestParameters: GetSvitaforDetectorRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSvitaforDetector.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/api/svitafor-detectors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getSvitaforDetectorFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SvitaforDetectorDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SvitaforDetectorDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getSvitaforDetectorRaw = async (requestParameters: GetSvitaforDetectorRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SvitaforDetectorDTO>> => {
        const context = this.getSvitaforDetectorRequestOpts(requestParameters);
        return this.getSvitaforDetectorFetch(context, initOverrides);
    }

    /**
     */
    getSvitaforDetector = async (id: number, initOverrides?: RequestInit): Promise<SvitaforDetectorDTO> => {
        const response = await this.getSvitaforDetectorRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetSvitaforDetector = (() => {
        const key = (id: number) => this.getSvitaforDetectorRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getSvitaforDetectorFetch(context));
        const fn = (id: number, config?: SWRConfiguration<SvitaforDetectorDTO>): SWRResponse<SvitaforDetectorDTO> => {
            return useSWR<SvitaforDetectorDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateSvitaforDetectorRequestOpts = (requestParameters: PartialUpdateSvitaforDetectorRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateSvitaforDetector.');
        }

        if (requestParameters.svitaforDetectorDTO === null || requestParameters.svitaforDetectorDTO === undefined) {
            throw new runtime.RequiredError('svitaforDetectorDTO','Required parameter requestParameters.svitaforDetectorDTO was null or undefined when calling partialUpdateSvitaforDetector.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/api/svitafor-detectors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SvitaforDetectorDTOToJSON(requestParameters.svitaforDetectorDTO),
        };
    }

    /**
     */
    protected partialUpdateSvitaforDetectorFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SvitaforDetectorDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SvitaforDetectorDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateSvitaforDetectorRaw = async (requestParameters: PartialUpdateSvitaforDetectorRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SvitaforDetectorDTO>> => {
        const context = this.partialUpdateSvitaforDetectorRequestOpts(requestParameters);
        return this.partialUpdateSvitaforDetectorFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateSvitaforDetector = async (id: number, svitaforDetectorDTO: SvitaforDetectorDTO, initOverrides?: RequestInit): Promise<SvitaforDetectorDTO> => {
        const response = await this.partialUpdateSvitaforDetectorRaw({ id: id, svitaforDetectorDTO: svitaforDetectorDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateSvitaforDetectorRequestOpts = (requestParameters: UpdateSvitaforDetectorRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSvitaforDetector.');
        }

        if (requestParameters.svitaforDetectorDTO === null || requestParameters.svitaforDetectorDTO === undefined) {
            throw new runtime.RequiredError('svitaforDetectorDTO','Required parameter requestParameters.svitaforDetectorDTO was null or undefined when calling updateSvitaforDetector.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/api/svitafor-detectors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SvitaforDetectorDTOToJSON(requestParameters.svitaforDetectorDTO),
        };
    }

    /**
     */
    protected updateSvitaforDetectorFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SvitaforDetectorDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SvitaforDetectorDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateSvitaforDetectorRaw = async (requestParameters: UpdateSvitaforDetectorRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SvitaforDetectorDTO>> => {
        const context = this.updateSvitaforDetectorRequestOpts(requestParameters);
        return this.updateSvitaforDetectorFetch(context, initOverrides);
    }

    /**
     */
    updateSvitaforDetector = async (id: number, svitaforDetectorDTO: SvitaforDetectorDTO, initOverrides?: RequestInit): Promise<SvitaforDetectorDTO> => {
        const response = await this.updateSvitaforDetectorRaw({ id: id, svitaforDetectorDTO: svitaforDetectorDTO }, initOverrides);
        return await response.value();
    }



}
