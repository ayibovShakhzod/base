/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    CameraBrandDTO,
    CameraBrandDTOFromJSON,
    CameraBrandDTOToJSON,
} from '../models';

export interface CreateCameraBrandRequest {
    cameraBrandDTO: CameraBrandDTO;
}

export interface DeleteCameraBrandRequest {
    id: number;
}

export interface GetAllCameraBrandsRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetCameraBrandRequest {
    id: number;
}

export interface PartialUpdateCameraBrandRequest {
    id: number;
    cameraBrandDTO: CameraBrandDTO;
}

export interface UpdateCameraBrandRequest {
    id: number;
    cameraBrandDTO: CameraBrandDTO;
}

/**
 * 
 */
export class CameraBrandResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createCameraBrandRequestOpts = (requestParameters: CreateCameraBrandRequest): runtime.RequestOpts => {
        if (requestParameters.cameraBrandDTO === null || requestParameters.cameraBrandDTO === undefined) {
            throw new runtime.RequiredError('cameraBrandDTO','Required parameter requestParameters.cameraBrandDTO was null or undefined when calling createCameraBrand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/camera-brands`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CameraBrandDTOToJSON(requestParameters.cameraBrandDTO),
        };
    }

    /**
     */
    protected createCameraBrandFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraBrandDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CameraBrandDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createCameraBrandRaw = async (requestParameters: CreateCameraBrandRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraBrandDTO>> => {
        const context = this.createCameraBrandRequestOpts(requestParameters);
        return this.createCameraBrandFetch(context, initOverrides);
    }

    /**
     */
    createCameraBrand = async (cameraBrandDTO: CameraBrandDTO, initOverrides?: RequestInit): Promise<CameraBrandDTO> => {
        const response = await this.createCameraBrandRaw({ cameraBrandDTO: cameraBrandDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteCameraBrandRequestOpts = (requestParameters: DeleteCameraBrandRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCameraBrand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/camera-brands/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteCameraBrandFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteCameraBrandRaw = async (requestParameters: DeleteCameraBrandRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteCameraBrandRequestOpts(requestParameters);
        return this.deleteCameraBrandFetch(context, initOverrides);
    }

    /**
     */
    deleteCameraBrand = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteCameraBrandRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAllCameraBrandsRequestOpts = (requestParameters: GetAllCameraBrandsRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/camera-brands`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllCameraBrandsFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CameraBrandDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CameraBrandDTOFromJSON));
    }

    /**
     */
    protected getAllCameraBrandsRaw = async (requestParameters: GetAllCameraBrandsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CameraBrandDTO>>> => {
        const context = this.getAllCameraBrandsRequestOpts(requestParameters);
        return this.getAllCameraBrandsFetch(context, initOverrides);
    }

    /**
     */
    getAllCameraBrands = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<CameraBrandDTO>> => {
        const response = await this.getAllCameraBrandsRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllCameraBrands = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllCameraBrandsRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllCameraBrandsFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<CameraBrandDTO>>): SWRResponse<Array<CameraBrandDTO>> => {
            return useSWR<Array<CameraBrandDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getCameraBrandRequestOpts = (requestParameters: GetCameraBrandRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCameraBrand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/camera-brands/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getCameraBrandFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraBrandDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CameraBrandDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getCameraBrandRaw = async (requestParameters: GetCameraBrandRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraBrandDTO>> => {
        const context = this.getCameraBrandRequestOpts(requestParameters);
        return this.getCameraBrandFetch(context, initOverrides);
    }

    /**
     */
    getCameraBrand = async (id: number, initOverrides?: RequestInit): Promise<CameraBrandDTO> => {
        const response = await this.getCameraBrandRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetCameraBrand = (() => {
        const key = (id: number) => this.getCameraBrandRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getCameraBrandFetch(context));
        const fn = (id: number, config?: SWRConfiguration<CameraBrandDTO>): SWRResponse<CameraBrandDTO> => {
            return useSWR<CameraBrandDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateCameraBrandRequestOpts = (requestParameters: PartialUpdateCameraBrandRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateCameraBrand.');
        }

        if (requestParameters.cameraBrandDTO === null || requestParameters.cameraBrandDTO === undefined) {
            throw new runtime.RequiredError('cameraBrandDTO','Required parameter requestParameters.cameraBrandDTO was null or undefined when calling partialUpdateCameraBrand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/camera-brands/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CameraBrandDTOToJSON(requestParameters.cameraBrandDTO),
        };
    }

    /**
     */
    protected partialUpdateCameraBrandFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraBrandDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CameraBrandDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateCameraBrandRaw = async (requestParameters: PartialUpdateCameraBrandRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraBrandDTO>> => {
        const context = this.partialUpdateCameraBrandRequestOpts(requestParameters);
        return this.partialUpdateCameraBrandFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateCameraBrand = async (id: number, cameraBrandDTO: CameraBrandDTO, initOverrides?: RequestInit): Promise<CameraBrandDTO> => {
        const response = await this.partialUpdateCameraBrandRaw({ id: id, cameraBrandDTO: cameraBrandDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateCameraBrandRequestOpts = (requestParameters: UpdateCameraBrandRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCameraBrand.');
        }

        if (requestParameters.cameraBrandDTO === null || requestParameters.cameraBrandDTO === undefined) {
            throw new runtime.RequiredError('cameraBrandDTO','Required parameter requestParameters.cameraBrandDTO was null or undefined when calling updateCameraBrand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/camera-brands/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CameraBrandDTOToJSON(requestParameters.cameraBrandDTO),
        };
    }

    /**
     */
    protected updateCameraBrandFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraBrandDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CameraBrandDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateCameraBrandRaw = async (requestParameters: UpdateCameraBrandRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CameraBrandDTO>> => {
        const context = this.updateCameraBrandRequestOpts(requestParameters);
        return this.updateCameraBrandFetch(context, initOverrides);
    }

    /**
     */
    updateCameraBrand = async (id: number, cameraBrandDTO: CameraBrandDTO, initOverrides?: RequestInit): Promise<CameraBrandDTO> => {
        const response = await this.updateCameraBrandRaw({ id: id, cameraBrandDTO: cameraBrandDTO }, initOverrides);
        return await response.value();
    }



}
