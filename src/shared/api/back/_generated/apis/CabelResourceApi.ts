/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    CabelDTO,
    CabelDTOFromJSON,
    CabelDTOToJSON,
} from '../models';

export interface CreateCabelRequest {
    cabelDTO: CabelDTO;
}

export interface DeleteCabelRequest {
    id: number;
}

export interface GetAllByType5Request {
    typeId: number;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetAllCabelsRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetCabelRequest {
    id: number;
}

export interface PartialUpdateCabelRequest {
    id: number;
    cabelDTO: CabelDTO;
}

export interface UpdateCabelRequest {
    id: number;
    cabelDTO: CabelDTO;
}

/**
 * 
 */
export class CabelResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createCabelRequestOpts = (requestParameters: CreateCabelRequest): runtime.RequestOpts => {
        if (requestParameters.cabelDTO === null || requestParameters.cabelDTO === undefined) {
            throw new runtime.RequiredError('cabelDTO','Required parameter requestParameters.cabelDTO was null or undefined when calling createCabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cabels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CabelDTOToJSON(requestParameters.cabelDTO),
        };
    }

    /**
     */
    protected createCabelFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CabelDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CabelDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createCabelRaw = async (requestParameters: CreateCabelRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CabelDTO>> => {
        const context = this.createCabelRequestOpts(requestParameters);
        return this.createCabelFetch(context, initOverrides);
    }

    /**
     */
    createCabel = async (cabelDTO: CabelDTO, initOverrides?: RequestInit): Promise<CabelDTO> => {
        const response = await this.createCabelRaw({ cabelDTO: cabelDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteCabelRequestOpts = (requestParameters: DeleteCabelRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cabels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteCabelFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteCabelRaw = async (requestParameters: DeleteCabelRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteCabelRequestOpts(requestParameters);
        return this.deleteCabelFetch(context, initOverrides);
    }

    /**
     */
    deleteCabel = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteCabelRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAllByType5RequestOpts = (requestParameters: GetAllByType5Request): runtime.RequestOpts => {
        if (requestParameters.typeId === null || requestParameters.typeId === undefined) {
            throw new runtime.RequiredError('typeId','Required parameter requestParameters.typeId was null or undefined when calling getAllByType5.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cabels/type/{typeId}`.replace(`{${"typeId"}}`, encodeURIComponent(String(requestParameters.typeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllByType5Fetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CabelDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CabelDTOFromJSON));
    }

    /**
     */
    protected getAllByType5Raw = async (requestParameters: GetAllByType5Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CabelDTO>>> => {
        const context = this.getAllByType5RequestOpts(requestParameters);
        return this.getAllByType5Fetch(context, initOverrides);
    }

    /**
     */
    getAllByType5 = async (typeId: number, page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<CabelDTO>> => {
        const response = await this.getAllByType5Raw({ typeId: typeId, page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllByType5 = (() => {
        const key = (requestParameters: GetAllByType5Request, config?: SWRConfiguration<Array<CabelDTO>>) => this.getAllByType5RequestOpts(requestParameters);
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllByType5Fetch(context));
        const fn = (requestParameters: GetAllByType5Request, config?: SWRConfiguration<Array<CabelDTO>>): SWRResponse<Array<CabelDTO>> => {
            return useSWR<Array<CabelDTO>>(() => key(requestParameters), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getAllCabelsRequestOpts = (requestParameters: GetAllCabelsRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cabels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllCabelsFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CabelDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CabelDTOFromJSON));
    }

    /**
     */
    protected getAllCabelsRaw = async (requestParameters: GetAllCabelsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CabelDTO>>> => {
        const context = this.getAllCabelsRequestOpts(requestParameters);
        return this.getAllCabelsFetch(context, initOverrides);
    }

    /**
     */
    getAllCabels = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<CabelDTO>> => {
        const response = await this.getAllCabelsRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllCabels = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllCabelsRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllCabelsFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<CabelDTO>>): SWRResponse<Array<CabelDTO>> => {
            return useSWR<Array<CabelDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getCabelRequestOpts = (requestParameters: GetCabelRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cabels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getCabelFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CabelDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CabelDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getCabelRaw = async (requestParameters: GetCabelRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CabelDTO>> => {
        const context = this.getCabelRequestOpts(requestParameters);
        return this.getCabelFetch(context, initOverrides);
    }

    /**
     */
    getCabel = async (id: number, initOverrides?: RequestInit): Promise<CabelDTO> => {
        const response = await this.getCabelRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetCabel = (() => {
        const key = (id: number) => this.getCabelRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getCabelFetch(context));
        const fn = (id: number, config?: SWRConfiguration<CabelDTO>): SWRResponse<CabelDTO> => {
            return useSWR<CabelDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateCabelRequestOpts = (requestParameters: PartialUpdateCabelRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateCabel.');
        }

        if (requestParameters.cabelDTO === null || requestParameters.cabelDTO === undefined) {
            throw new runtime.RequiredError('cabelDTO','Required parameter requestParameters.cabelDTO was null or undefined when calling partialUpdateCabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cabels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CabelDTOToJSON(requestParameters.cabelDTO),
        };
    }

    /**
     */
    protected partialUpdateCabelFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CabelDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CabelDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateCabelRaw = async (requestParameters: PartialUpdateCabelRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CabelDTO>> => {
        const context = this.partialUpdateCabelRequestOpts(requestParameters);
        return this.partialUpdateCabelFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateCabel = async (id: number, cabelDTO: CabelDTO, initOverrides?: RequestInit): Promise<CabelDTO> => {
        const response = await this.partialUpdateCabelRaw({ id: id, cabelDTO: cabelDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateCabelRequestOpts = (requestParameters: UpdateCabelRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCabel.');
        }

        if (requestParameters.cabelDTO === null || requestParameters.cabelDTO === undefined) {
            throw new runtime.RequiredError('cabelDTO','Required parameter requestParameters.cabelDTO was null or undefined when calling updateCabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/cabels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CabelDTOToJSON(requestParameters.cabelDTO),
        };
    }

    /**
     */
    protected updateCabelFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CabelDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CabelDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateCabelRaw = async (requestParameters: UpdateCabelRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CabelDTO>> => {
        const context = this.updateCabelRequestOpts(requestParameters);
        return this.updateCabelFetch(context, initOverrides);
    }

    /**
     */
    updateCabel = async (id: number, cabelDTO: CabelDTO, initOverrides?: RequestInit): Promise<CabelDTO> => {
        const response = await this.updateCabelRaw({ id: id, cabelDTO: cabelDTO }, initOverrides);
        return await response.value();
    }



}
