/* tslint:disable */
/* eslint-disable */
/**
 * Tech-Inventory API
 * Rest API of TECH-INVENTORY
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import useSWR, { SWRConfiguration, SWRResponse } from "swr";
import {
    ObjectTasnifiDTO,
    ObjectTasnifiDTOFromJSON,
    ObjectTasnifiDTOToJSON,
} from '../models';

export interface CreateObjectTasnifiRequest {
    objectTasnifiDTO: ObjectTasnifiDTO;
}

export interface DeleteObjectTasnifiRequest {
    id: number;
}

export interface GetAllByType3Request {
    typeId: number;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetAllObjectTasnifisRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetObjectTasnifiRequest {
    id: number;
}

export interface PartialUpdateObjectTasnifiRequest {
    id: number;
    objectTasnifiDTO: ObjectTasnifiDTO;
}

export interface UpdateObjectTasnifiRequest {
    id: number;
    objectTasnifiDTO: ObjectTasnifiDTO;
}

/**
 * 
 */
export class ObjectTasnifiResourceApi extends runtime.BaseAPI {

    /**
     */
    protected createObjectTasnifiRequestOpts = (requestParameters: CreateObjectTasnifiRequest): runtime.RequestOpts => {
        if (requestParameters.objectTasnifiDTO === null || requestParameters.objectTasnifiDTO === undefined) {
            throw new runtime.RequiredError('objectTasnifiDTO','Required parameter requestParameters.objectTasnifiDTO was null or undefined when calling createObjectTasnifi.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/object-tasnifis`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ObjectTasnifiDTOToJSON(requestParameters.objectTasnifiDTO),
        };
    }

    /**
     */
    protected createObjectTasnifiFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObjectTasnifiDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectTasnifiDTOFromJSON(jsonValue));
    }

    /**
     */
    protected createObjectTasnifiRaw = async (requestParameters: CreateObjectTasnifiRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObjectTasnifiDTO>> => {
        const context = this.createObjectTasnifiRequestOpts(requestParameters);
        return this.createObjectTasnifiFetch(context, initOverrides);
    }

    /**
     */
    createObjectTasnifi = async (objectTasnifiDTO: ObjectTasnifiDTO, initOverrides?: RequestInit): Promise<ObjectTasnifiDTO> => {
        const response = await this.createObjectTasnifiRaw({ objectTasnifiDTO: objectTasnifiDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected deleteObjectTasnifiRequestOpts = (requestParameters: DeleteObjectTasnifiRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteObjectTasnifi.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/object-tasnifis/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected deleteObjectTasnifiFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    protected deleteObjectTasnifiRaw = async (requestParameters: DeleteObjectTasnifiRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> => {
        const context = this.deleteObjectTasnifiRequestOpts(requestParameters);
        return this.deleteObjectTasnifiFetch(context, initOverrides);
    }

    /**
     */
    deleteObjectTasnifi = async (id: number, initOverrides?: RequestInit): Promise<void> => {
        await this.deleteObjectTasnifiRaw({ id: id }, initOverrides);
    }



    /**
     */
    protected getAllByType3RequestOpts = (requestParameters: GetAllByType3Request): runtime.RequestOpts => {
        if (requestParameters.typeId === null || requestParameters.typeId === undefined) {
            throw new runtime.RequiredError('typeId','Required parameter requestParameters.typeId was null or undefined when calling getAllByType3.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/object-tasnifis/type/{typeId}`.replace(`{${"typeId"}}`, encodeURIComponent(String(requestParameters.typeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllByType3Fetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ObjectTasnifiDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ObjectTasnifiDTOFromJSON));
    }

    /**
     */
    protected getAllByType3Raw = async (requestParameters: GetAllByType3Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ObjectTasnifiDTO>>> => {
        const context = this.getAllByType3RequestOpts(requestParameters);
        return this.getAllByType3Fetch(context, initOverrides);
    }

    /**
     */
    getAllByType3 = async (typeId: number, page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<ObjectTasnifiDTO>> => {
        const response = await this.getAllByType3Raw({ typeId: typeId, page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllByType3 = (() => {
        const key = (requestParameters: GetAllByType3Request, config?: SWRConfiguration<Array<ObjectTasnifiDTO>>) => this.getAllByType3RequestOpts(requestParameters);
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllByType3Fetch(context));
        const fn = (requestParameters: GetAllByType3Request, config?: SWRConfiguration<Array<ObjectTasnifiDTO>>): SWRResponse<Array<ObjectTasnifiDTO>> => {
            return useSWR<Array<ObjectTasnifiDTO>>(() => key(requestParameters), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getAllObjectTasnifisRequestOpts = (requestParameters: GetAllObjectTasnifisRequest): runtime.RequestOpts => {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/object-tasnifis`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getAllObjectTasnifisFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ObjectTasnifiDTO>>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ObjectTasnifiDTOFromJSON));
    }

    /**
     */
    protected getAllObjectTasnifisRaw = async (requestParameters: GetAllObjectTasnifisRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ObjectTasnifiDTO>>> => {
        const context = this.getAllObjectTasnifisRequestOpts(requestParameters);
        return this.getAllObjectTasnifisFetch(context, initOverrides);
    }

    /**
     */
    getAllObjectTasnifis = async (page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<Array<ObjectTasnifiDTO>> => {
        const response = await this.getAllObjectTasnifisRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetAllObjectTasnifis = (() => {
        const key = (page?: number, size?: number, sort?: Array<string>) => this.getAllObjectTasnifisRequestOpts({ page: page, size: size, sort: sort });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getAllObjectTasnifisFetch(context));
        const fn = (page?: number, size?: number, sort?: Array<string>, config?: SWRConfiguration<Array<ObjectTasnifiDTO>>): SWRResponse<Array<ObjectTasnifiDTO>> => {
            return useSWR<Array<ObjectTasnifiDTO>>(() => key(page, size, sort), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected getObjectTasnifiRequestOpts = (requestParameters: GetObjectTasnifiRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getObjectTasnifi.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/object-tasnifis/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    protected getObjectTasnifiFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObjectTasnifiDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectTasnifiDTOFromJSON(jsonValue));
    }

    /**
     */
    protected getObjectTasnifiRaw = async (requestParameters: GetObjectTasnifiRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObjectTasnifiDTO>> => {
        const context = this.getObjectTasnifiRequestOpts(requestParameters);
        return this.getObjectTasnifiFetch(context, initOverrides);
    }

    /**
     */
    getObjectTasnifi = async (id: number, initOverrides?: RequestInit): Promise<ObjectTasnifiDTO> => {
        const response = await this.getObjectTasnifiRaw({ id: id }, initOverrides);
        return await response.value();
    }


    /**
     */
    useGetObjectTasnifi = (() => {
        const key = (id: number) => this.getObjectTasnifiRequestOpts({ id: id });
        const fetcher = (context: runtime.RequestOpts) => this.swrFetch(this.getObjectTasnifiFetch(context));
        const fn = (id: number, config?: SWRConfiguration<ObjectTasnifiDTO>): SWRResponse<ObjectTasnifiDTO> => {
            return useSWR<ObjectTasnifiDTO>(() => key(id), fetcher, config);
        }
        fn.key = key
        return fn
    })()

    /**
     */
    protected partialUpdateObjectTasnifiRequestOpts = (requestParameters: PartialUpdateObjectTasnifiRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateObjectTasnifi.');
        }

        if (requestParameters.objectTasnifiDTO === null || requestParameters.objectTasnifiDTO === undefined) {
            throw new runtime.RequiredError('objectTasnifiDTO','Required parameter requestParameters.objectTasnifiDTO was null or undefined when calling partialUpdateObjectTasnifi.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/object-tasnifis/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ObjectTasnifiDTOToJSON(requestParameters.objectTasnifiDTO),
        };
    }

    /**
     */
    protected partialUpdateObjectTasnifiFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObjectTasnifiDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectTasnifiDTOFromJSON(jsonValue));
    }

    /**
     */
    protected partialUpdateObjectTasnifiRaw = async (requestParameters: PartialUpdateObjectTasnifiRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObjectTasnifiDTO>> => {
        const context = this.partialUpdateObjectTasnifiRequestOpts(requestParameters);
        return this.partialUpdateObjectTasnifiFetch(context, initOverrides);
    }

    /**
     */
    partialUpdateObjectTasnifi = async (id: number, objectTasnifiDTO: ObjectTasnifiDTO, initOverrides?: RequestInit): Promise<ObjectTasnifiDTO> => {
        const response = await this.partialUpdateObjectTasnifiRaw({ id: id, objectTasnifiDTO: objectTasnifiDTO }, initOverrides);
        return await response.value();
    }



    /**
     */
    protected updateObjectTasnifiRequestOpts = (requestParameters: UpdateObjectTasnifiRequest): runtime.RequestOpts => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateObjectTasnifi.');
        }

        if (requestParameters.objectTasnifiDTO === null || requestParameters.objectTasnifiDTO === undefined) {
            throw new runtime.RequiredError('objectTasnifiDTO','Required parameter requestParameters.objectTasnifiDTO was null or undefined when calling updateObjectTasnifi.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/api/object-tasnifis/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ObjectTasnifiDTOToJSON(requestParameters.objectTasnifiDTO),
        };
    }

    /**
     */
    protected updateObjectTasnifiFetch = async (context: runtime.RequestOpts, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObjectTasnifiDTO>> => {
        const response = await this.request(context, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectTasnifiDTOFromJSON(jsonValue));
    }

    /**
     */
    protected updateObjectTasnifiRaw = async (requestParameters: UpdateObjectTasnifiRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ObjectTasnifiDTO>> => {
        const context = this.updateObjectTasnifiRequestOpts(requestParameters);
        return this.updateObjectTasnifiFetch(context, initOverrides);
    }

    /**
     */
    updateObjectTasnifi = async (id: number, objectTasnifiDTO: ObjectTasnifiDTO, initOverrides?: RequestInit): Promise<ObjectTasnifiDTO> => {
        const response = await this.updateObjectTasnifiRaw({ id: id, objectTasnifiDTO: objectTasnifiDTO }, initOverrides);
        return await response.value();
    }



}
